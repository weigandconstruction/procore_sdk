# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreDocumentsDocuments do
  @moduledoc """
  API calls for all endpoints tagged `CoreDocumentsDocuments`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Company Folder and File index
  Return a list of all folders and files in the company

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): Determines how much information to include in the response. `normal` is the default, `extended` provides additional data. The example below shows the `extended` response.
    - `:sort` (String.t): Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
    - `:"filters[created_by_id]"` ([integer()]): Return item(s) created by the specified User IDs
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[document_type]"` (String.t): Return item(s) that are file or folder
    - `:"filters[file_type]"` ([String.t]): Return item(s) that have the file extensions
    - `:"filters[is_in_recycle_bin]"` (boolean()): Return item(s) that are in or not in the recycle bin
    - `:"filters[search]"` (String.t): Return item(s) that contain string in document name and file description
    - `:"filters[folder_id]"` (integer()): Returns the folder for a given id with all subfolders and subfiles up to a depth of 100.  Depths greater than 100 will need multiple queries to get all children.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%ExampleOfAFolderThatIsAFile{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_documents_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.ExampleOfAFolderThatIsAFile.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_documents_get(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query,
      :sort => :query,
      :"filters[created_by_id]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[document_type]" => :query,
      :"filters[file_type]" => :query,
      :"filters[is_in_recycle_bin]" => :query,
      :"filters[search]" => :query,
      :"filters[folder_id]" => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/documents")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ExampleOfAFolderThatIsAFile},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Project Folder and File index
  Return a list of all folders and files in the project

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): Determines how much information to include in the response. `normal` is the default, `extended` provides additional data. The example below shows the `extended` response.
    - `:sort` (String.t): Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
    - `:"filters[created_by_id]"` ([integer()]): Return item(s) created by the specified User IDs
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[document_type]"` (String.t): Return item(s) that are file or folder
    - `:"filters[file_type]"` ([String.t]): Return item(s) that have the file extensions
    - `:"filters[is_in_recycle_bin]"` (boolean()): Return item(s) that are in or not in the recycle bin
    - `:"filters[search]"` (String.t): Return item(s) that contain string in document name and file description
    - `:"filters[folder_id]"` (integer()): Returns the folder for a given id with all subfolders and subfiles up to a depth of 100.  Depths greater than 100 will need multiple queries to get all children.
    - `:"filters[custom_tag_ids]"` ([integer()]): Return item(s) with specified custom tag IDs
    - `:"filters[private]"` (boolean()): If true, returns only item(s) with a `private` status.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%ExampleOfAFolderThatIsAFile{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_documents_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.ExampleOfAFolderThatIsAFile.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_documents_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query,
      :sort => :query,
      :"filters[created_by_id]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[document_type]" => :query,
      :"filters[file_type]" => :query,
      :"filters[is_in_recycle_bin]" => :query,
      :"filters[search]" => :query,
      :"filters[folder_id]" => :query,
      :"filters[custom_tag_ids]" => :query,
      :"filters[private]" => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/documents")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ExampleOfAFolderThatIsAFile},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
