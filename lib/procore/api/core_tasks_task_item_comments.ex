# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreTasksTaskItemComments do
  @moduledoc """
  API calls for all endpoints tagged `CoreTasksTaskItemComments`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Task Item Comments
  Returns a list of comments associated with the project. Can be filtered by task_item_id and/or created_by_id.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:"filters[task_item_id]"` (integer()): Filter by task_item_id to return comments for only that task_item
    - `:"filters[created_by_id]"` ([integer()]): Returns item(s) created by the specified User IDs.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_projects_project_id_task_item_comments_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             list(
               Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner.t()
             )}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_projects_project_id_task_item_comments_get(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :"filters[task_item_id]" => :query,
      :"filters[created_by_id]" => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/projects/#{project_id}/task_item_comments")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete a task item comment
  Deletes the task item comment with ID supplied in path. Returns an empty body if successful.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Task Item Comment ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_projects_project_id_task_item_comments_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_projects_project_id_task_item_comments_id_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/companies/#{company_id}/projects/#{project_id}/task_item_comments/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner},
      {404,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response}
    ])
  end

  @doc """
  Update a task item comment
  Updates the task item comment with ID supplied in path. Returns the updated comment.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Task Item Comment ID
  - `rest_v10_companies_company_id_projects_project_id_task_item_comments_id_patch_request` (RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsIdPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_projects_project_id_task_item_comments_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_projects_project_id_task_item_comments_id_patch(
        connection,
        procore_company_id,
        company_id,
        project_id,
        id,
        rest_v10_companies_company_id_projects_project_id_task_item_comments_id_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/companies/#{company_id}/projects/#{project_id}/task_item_comments/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_projects_project_id_task_item_comments_id_patch_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner},
      {404,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response}
    ])
  end

  @doc """
  Create a task item comment
  Create a new task item comment for a given task_item_id and created_by_id

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_companies_company_id_projects_project_id_task_item_comments_post_request` (RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_projects_project_id_task_item_comments_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPostRequest.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_projects_project_id_task_item_comments_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        rest_v10_companies_company_id_projects_project_id_task_item_comments_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/companies/#{company_id}/projects/#{project_id}/task_item_comments")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_projects_project_id_task_item_comments_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsGet200ResponseInner},
      {403,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response},
      {422,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response}
    ])
  end
end
