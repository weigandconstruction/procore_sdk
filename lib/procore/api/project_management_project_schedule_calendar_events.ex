# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementProjectScheduleCalendarEvents do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementProjectScheduleCalendarEvents`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List calendar events
  DEPRECATED: This endpoint is not accurate across time zones and has been deprecated. It will be removed in a future version of the API. Use the Schedule Tasks, Calendar Items, and Schedule endpoints instead.  List all Calendar Events for a specified project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:"calendar[start_datetime]"` (DateTime.t): Start date or date-time
    - `:"calendar[finish_datetime]"` (DateTime.t): Finish date or date-time
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, Procore.Model.RestV10CalendarEventsGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_calendar_events_get(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10CalendarEventsGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_calendar_events_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :"calendar[start_datetime]" => :query,
      :"calendar[finish_datetime]" => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/calendar_events")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10CalendarEventsGet200Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
