# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementPhotosImages do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementPhotosImages`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List images
  Return a list of all Images from a Project's Photo Album (Image Category).  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:image_category_id` (integer()): Optional. ID of the image category to filter the images by.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[log_date]"` (Date.t): Date of Photos added to the Daily Log in the format \"YYYY-MM-DD\", or a range of dates in the format \"YYYY-MM-DD...YYYY-MM-DD\".
    - `:"filters[private]"` (boolean()): If true, returns only item(s) with a `private` status.
    - `:"filters[starred]"` (boolean()): If true, returns only item(s) with a `starred` status.
    - `:"filters[location_id]"` ([integer()]): Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
    - `:"filters[include_sublocations]"` (boolean()): Use together with `filters[location_id]` 
    - `:"filters[trade_ids]"` ([integer()]): Array of Trade IDs. Returns item(s) with the specified Trade IDs.
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:sort` (String.t): Field to sort by. If the field is passed with a - (EX: -created_at) it is sorted in reverse order
    - `:serializer_view` (String.t): The data set that should be returned from the serializer. The normal view includes default fields, plus links, comments_count, trades. The android view includes default fields, plus trades, comments. The mobile view include default fields, plus log_date, trades, comments. The mobile_feed view includes default fields, plus comments. The prostore_file view includes default fields, plus images. The ids_only view does not include default fields, response returns strictly an array of image ids. Default view is normal.

  ### Returns

  - `{:ok, [%Image{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_images_get(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.Image.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_images_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :image_category_id => :query,
      :page => :query,
      :per_page => :query,
      :"filters[log_date]" => :query,
      :"filters[private]" => :query,
      :"filters[starred]" => :query,
      :"filters[location_id]" => :query,
      :"filters[include_sublocations]" => :query,
      :"filters[trade_ids]" => :query,
      :"filters[query]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[id]" => :query,
      :sort => :query,
      :serializer_view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/images")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Image},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete image
  Remove an Image from a Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID of the image
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:permanent` (boolean()): If true, permanently deletes the image.

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_images_id_delete(Tesla.Env.client(), integer(), integer(), integer(), keyword()) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_images_id_delete(connection, procore_company_id, id, project_id, opts \\ []) do
    optional_params = %{
      :permanent => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/images/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show image
  Show detailed information for a specified Image in a Project's Photo Album (Image Category).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID of the image
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Image.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_images_id_get(Tesla.Env.client(), integer(), integer(), integer(), keyword()) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Image.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_images_id_get(connection, procore_company_id, id, project_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/images/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Image},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update image
  Update an existing Image in a Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID of the image
  - `project_id` (integer()): Unique identifier for the project.
  - `body79` (Body79): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Image.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_images_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.Body79.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Image.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_images_id_patch(
        connection,
        procore_company_id,
        id,
        project_id,
        body79,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/images/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:body, :body, body79)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Image},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create image
  Upload and add a new Image to a Project's Photo Album (Image Category).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `image_name` (String.t): The name of the image file to be uploaded. Required when using an upload_uuid to upload the image.
  - `image` (Procore.Model.Image1.t): 
  - `opts` (keyword): Optional parameters
    - `:upload_uuid` (String.t): UUID referencing a previously completed Upload. See Company Uploads or Project Uploads for instructions on how use uploads. You should not use both data and upload_uuid fields in the same request.

  ### Returns

  - `{:ok, Procore.Model.Image.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_images_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          Procore.Model.Image1.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Image.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_images_post(
        connection,
        procore_company_id,
        project_id,
        image_name,
        image,
        opts \\ []
      ) do
    optional_params = %{
      :upload_uuid => :form
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/images")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:form, :image_name, image_name)
      |> add_param(:form, :image, image)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.Image},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
