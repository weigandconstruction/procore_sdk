# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementEmailEmailCommunications do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementEmailEmailCommunications`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Download all email attachments
  Return URL to download all email attachments in .zip format

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `communication_id` (integer()): Communication ID
  - `email_id` (integer()): Email ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsCommunicationIdEmailsEmailIdDownloadAttachmentsGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_project_project_id_email_communications_communication_id_emails_email_id_download_attachments_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10ProjectProjectIdEmailCommunicationsCommunicationIdEmailsEmailIdDownloadAttachmentsGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_project_project_id_email_communications_communication_id_emails_email_id_download_attachments_get(
        connection,
        procore_company_id,
        project_id,
        communication_id,
        email_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/project/#{project_id}/email_communications/#{communication_id}/emails/#{email_id}/download_attachments"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10ProjectProjectIdEmailCommunicationsCommunicationIdEmailsEmailIdDownloadAttachmentsGet200Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Email
  Creates a email on a given communication

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `communication_id` (integer()): Communication ID
  - `topic_type` (String.t): The type of the topic to be associated with the communication
  - `topic_id` (integer()): Topic ID
  - `rest_v10_project_project_id_email_communications_communication_id_emails_post_request` (RestV10ProjectProjectIdEmailCommunicationsCommunicationIdEmailsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_project_project_id_email_communications_communication_id_emails_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          integer(),
          Procore.Model.RestV10ProjectProjectIdEmailCommunicationsCommunicationIdEmailsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_project_project_id_email_communications_communication_id_emails_post(
        connection,
        procore_company_id,
        project_id,
        communication_id,
        topic_type,
        topic_id,
        rest_v10_project_project_id_email_communications_communication_id_emails_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/project/#{project_id}/email_communications/#{communication_id}/emails")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :topic_type, topic_type)
      |> add_param(:query, :topic_id, topic_id)
      |> add_param(
        :body,
        :body,
        rest_v10_project_project_id_email_communications_communication_id_emails_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Export Email Communication to PDF
  Creates a email communication on a given project

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `communication_id` (integer()): Communication ID
  - `topic_type` (String.t): The type of the topic to be associated with the communication
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsCommunicationIdExportGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_project_project_id_email_communications_communication_id_export_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10ProjectProjectIdEmailCommunicationsCommunicationIdExportGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_project_project_id_email_communications_communication_id_export_get(
        connection,
        procore_company_id,
        project_id,
        communication_id,
        topic_type,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/project/#{project_id}/email_communications/#{communication_id}/export")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :topic_type, topic_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10ProjectProjectIdEmailCommunicationsCommunicationIdExportGet200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List of Emails
  Return a list of emails.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `topic_type` (String.t): The type of the topic to be associated with the communication
  - `topic_id` (integer()): Topic ID
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsEmailsGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_project_project_id_email_communications_emails_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10ProjectProjectIdEmailCommunicationsEmailsGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_project_project_id_email_communications_emails_get(
        connection,
        procore_company_id,
        project_id,
        topic_type,
        topic_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/project/#{project_id}/email_communications/emails")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :topic_type, topic_type)
      |> add_param(:query, :topic_id, topic_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsEmailsGet200Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Email Communication
  Shows detailed information around a single email communication

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Communication ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_project_project_id_email_communications_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_project_project_id_email_communications_id_get(
        connection,
        procore_company_id,
        project_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/project/#{project_id}/email_communications/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update a private field in Email Communication
  Update a private field in email communication on the specified project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Communication ID
  - `rest_v10_project_project_id_email_communications_id_patch_request` (RestV10ProjectProjectIdEmailCommunicationsIdPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_project_project_id_email_communications_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_project_project_id_email_communications_id_patch(
        connection,
        procore_company_id,
        project_id,
        id,
        rest_v10_project_project_id_email_communications_id_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/project/#{project_id}/email_communications/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_project_project_id_email_communications_id_patch_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Email Communication
  Creates a email communication on a given project

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `topic_type` (String.t): The type of the topic to be associated with the communication
  - `topic_id` (integer()): Topic ID
  - `rest_v10_project_project_id_email_communications_post_request` (RestV10ProjectProjectIdEmailCommunicationsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_project_project_id_email_communications_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          integer(),
          Procore.Model.RestV10ProjectProjectIdEmailCommunicationsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_project_project_id_email_communications_post(
        connection,
        procore_company_id,
        project_id,
        topic_type,
        topic_id,
        rest_v10_project_project_id_email_communications_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/project/#{project_id}/email_communications")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :topic_type, topic_type)
      |> add_param(:query, :topic_id, topic_id)
      |> add_param(:body, :body, rest_v10_project_project_id_email_communications_post_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV10ProjectProjectIdEmailCommunicationsIdGet200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
