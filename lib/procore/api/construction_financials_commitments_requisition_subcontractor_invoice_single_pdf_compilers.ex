# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ConstructionFinancialsCommitmentsRequisitionSubcontractorInvoiceSinglePDFCompilers do
  @moduledoc """
  API calls for all endpoints tagged `ConstructionFinancialsCommitmentsRequisitionSubcontractorInvoiceSinglePDFCompilers`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Merges one or more PDFs of a requisition into a single PDF
  Merges one or more PDFs of a requisition into a single PDF. There are two ways to use this endpoint. First to generate a cover sheet for the requisition. If you would like to receive a polling URL that will follow the job provide the polling option in the query params `polling=true`. If you would like the file emailed to you omit the polling param in the query params. You can use the following request payload as an example  ````json {   \"files\":[     {\"type\": \"cover_sheet\", \"id\": \"\"}   ] } ```` If you would like to include some attachments, you can use the following request payload as an example  ````json {   \"files\": [     {       \"id\": \"\",       \"type\": \"cover_sheet\"     },     {       \"id\": 1234,       \"url\": \"http://example.com/file_1.pdf\",       \"type\": \"prostore_file\"     }   ] } ````

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `requisition_id` (integer()): Requisition (Subcontractor Invoice) ID
  - `project_id` (integer()): Unique identifier for the project.
  - `body22` (Body22): 
  - `opts` (keyword): Optional parameters
    - `:polling` (boolean()): Determines if the PDF is emailed or a job URL is returned

  ### Returns

  - `{:ok, Procore.Model.RestV10RequisitionsRequisitionIdSinglePdfCompilersPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_requisitions_requisition_id_single_pdf_compilers_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.Body22.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:ok,
             Procore.Model.RestV10RequisitionsRequisitionIdSinglePdfCompilersPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_requisitions_requisition_id_single_pdf_compilers_post(
        connection,
        procore_company_id,
        requisition_id,
        project_id,
        body22,
        opts \\ []
      ) do
    optional_params = %{
      :polling => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/requisitions/#{requisition_id}/single_pdf_compilers")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:body, :body, body22)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10RequisitionsRequisitionIdSinglePdfCompilersPost200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
