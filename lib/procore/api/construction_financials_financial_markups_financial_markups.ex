# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ConstructionFinancialsFinancialMarkupsFinancialMarkups do
  @moduledoc """
  API calls for all endpoints tagged `ConstructionFinancialsFinancialMarkupsFinancialMarkups`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Retrieve a list of Markups
  Retrieves a list of markups associated with the specified holder.  This endpoint supports the Contract and Potential Change Order tools.  Access requires the user to have admin permissions for the relevant tool.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): ID of the Markup's Project
  - `holder_type` (String.t): Type of the Markup's Holder
  - `holder_id` (integer()): ID of the Markup's Holder
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%FinancialMarkup{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_financials_markups_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.FinancialMarkup.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_financials_markups_get(
        connection,
        procore_company_id,
        project_id,
        holder_type,
        holder_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/financials/markups")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :holder_type, holder_type)
      |> add_param(:query, :holder_id, holder_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.FinancialMarkup},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Remove an existing Markup
  Remove an existing Markup from the holder. This endpoint supports the Contract and Potential Change Order tools.  Access requires the user to have admin permissions for the relevant tool. Markups associated with contracts can be updated at any time. Markups on potential change orders can only be updated when the SOV (Schedule of Values) lines  are in an editable state.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): ID of the Markup's Project
  - `holder_type` (String.t): Type of the Markup's Holder
  - `holder_id` (integer()): ID of the Markup's Holder
  - `id` (integer()): ID of the Markup
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_financials_markups_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_financials_markups_id_delete(
        connection,
        procore_company_id,
        project_id,
        holder_type,
        holder_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/financials/markups/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :holder_type, holder_type)
      |> add_param(:query, :holder_id, holder_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Retrieve details for the Markup
  Retrieve details for the Markup for specified holder. This endpoint supports the Contract and Potential Change Order tools.  Access requires the user to have admin permissions for the relevant tool

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): ID of the Markup's Project
  - `holder_type` (String.t): Type of the Markup's Holder
  - `holder_id` (integer()): ID of the Markup's Holder
  - `id` (integer()): ID of the Markup
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.FinancialMarkup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_financials_markups_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.FinancialMarkup.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_financials_markups_id_get(
        connection,
        procore_company_id,
        project_id,
        holder_type,
        holder_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/financials/markups/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :holder_type, holder_type)
      |> add_param(:query, :holder_id, holder_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.FinancialMarkup},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Modify an existing Markup
  Modify an existing Markup with new data for specified holder. This endpoint supports the Contract and Potential Change Order tools.  Access requires the user to have admin permissions for the relevant tool. Markups associated with contracts can be updated at any time. Markups on potential change orders can only be updated when the SOV (Schedule of Values) lines  are in an editable state

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): ID of the Markup's Project
  - `holder_type` (String.t): Type of the Markup's Holder
  - `holder_id` (integer()): ID of the Markup's Holder
  - `id` (integer()): ID of the Markup
  - `body89` (Body89): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.FinancialMarkup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_financials_markups_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          integer(),
          integer(),
          Procore.Model.Body89.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.FinancialMarkup.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_financials_markups_id_patch(
        connection,
        procore_company_id,
        project_id,
        holder_type,
        holder_id,
        id,
        body89,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/financials/markups/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :holder_type, holder_type)
      |> add_param(:query, :holder_id, holder_id)
      |> add_param(:body, :body, body89)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.FinancialMarkup},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Add a new Markup
  Add a new Markup to the holder. This endpoint supports the Contract and Potential Change Order tools.  Access requires the user to have admin permissions for the relevant tool. Markups associated with contracts can be updated at any time. Markups on potential change orders can only be updated when the SOV (Schedule of Values) lines  are in an editable state.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): ID of the Markup's Project
  - `holder_type` (String.t): Type of the Markup's Holder
  - `holder_id` (integer()): ID of the Markup's Holder
  - `body88` (Body88): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.FinancialMarkup.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_financials_markups_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          integer(),
          Procore.Model.Body88.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.FinancialMarkup.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_financials_markups_post(
        connection,
        procore_company_id,
        project_id,
        holder_type,
        holder_id,
        body88,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/financials/markups")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :holder_type, holder_type)
      |> add_param(:query, :holder_id, holder_id)
      |> add_param(:body, :body, body88)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.FinancialMarkup},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
