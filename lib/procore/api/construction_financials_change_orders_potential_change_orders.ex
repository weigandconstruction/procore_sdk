# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ConstructionFinancialsChangeOrdersPotentialChangeOrders do
  @moduledoc """
  API calls for all endpoints tagged `ConstructionFinancialsChangeOrdersPotentialChangeOrders`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Potential Change Orders
  Return a list of all Potential Change Orders (PCO).  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[origin_id]"` (String.t): Origin ID. Returns item(s) with the specified Origin ID.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[due_date]"` (String.t): Returns item(s) due within the specified ISO 8601 datetime range.
    - `:"filters[contract_id]"` (integer()): Contract ID. Returns item(s) with the specified Contract ID.
    - `:"filters[include_deleted]"` (String.t): Use 'only' for only deleted resources. Use 'with' for deleted and undeleted resources.
    - `:"filters[invoiced_date]"` (String.t): Returns item(s) invoiced within the specified ISO 8601 datetime range.
    - `:"filters[paid_date]"` (String.t): Returns item(s) paid within the specified ISO 8601 datetime range.
    - `:"filters[reviewed_at]"` (String.t): Returns item(s) reviewed within the specified ISO 8601 datetime range.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10PotentialChangeOrdersGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_get(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10PotentialChangeOrdersGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :"filters[id]" => :query,
      :"filters[origin_id]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[due_date]" => :query,
      :"filters[contract_id]" => :query,
      :"filters[include_deleted]" => :query,
      :"filters[invoiced_date]" => :query,
      :"filters[paid_date]" => :query,
      :"filters[reviewed_at]" => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/potential_change_orders")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10PotentialChangeOrdersGet200ResponseInner},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Potential Change Orders
  Return detailed information about a Potential Change Order (PCO).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID
  - `project_id` (integer()): Unique identifier for the project.
  - `contract_id` (integer()): Contract ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.ArrayOfPotentialChangeOrdersEntitiesInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.ArrayOfPotentialChangeOrdersEntitiesInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_id_get(
        connection,
        procore_company_id,
        id,
        project_id,
        contract_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/potential_change_orders/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :contract_id, contract_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ArrayOfPotentialChangeOrdersEntitiesInner},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Potential Change Order
  Update information about a specific Potential Change Order (PCO).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID
  - `rest_v10_potential_change_orders_id_patch_request` (RestV10PotentialChangeOrdersIdPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.ArrayOfPotentialChangeOrdersEntitiesInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10PotentialChangeOrdersIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.ArrayOfPotentialChangeOrdersEntitiesInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_id_patch(
        connection,
        procore_company_id,
        id,
        rest_v10_potential_change_orders_id_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/potential_change_orders/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_potential_change_orders_id_patch_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ArrayOfPotentialChangeOrdersEntitiesInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Potential Change Order
  Create a new Potential Change Order (PCO).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `rest_v10_potential_change_orders_post_request` (RestV10PotentialChangeOrdersPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10PotentialChangeOrdersPost201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_post(
          Tesla.Env.client(),
          integer(),
          Procore.Model.RestV10PotentialChangeOrdersPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10PotentialChangeOrdersPost201Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_post(
        connection,
        procore_company_id,
        rest_v10_potential_change_orders_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/potential_change_orders")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_potential_change_orders_post_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV10PotentialChangeOrdersPost201Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Potential Change Order Line Items
  Return a list of all Potential Change Order Line Items.  Change Event Line Item information is only returned if a line item is associated to a change event line item and user can view change events.  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `potential_change_order_id` (integer()): Potential Change Order ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[cost_code_id]"` (String.t): Cost Code ID. Returns item(s) with the specified Cost Code ID or within the specified range of Cost Code IDs.
    - `:"filters[line_item_type_id]"` (integer()): Line Item Type ID. Returns item(s) with the specified Line Item Type ID or range of Line Item Type IDs.

  ### Returns

  - `{:ok, [%Default{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_potential_change_order_id_line_items_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.Default.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_potential_change_order_id_line_items_get(
        connection,
        procore_company_id,
        potential_change_order_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[id]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[cost_code_id]" => :query,
      :"filters[line_item_type_id]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/potential_change_orders/#{potential_change_order_id}/line_items")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Default},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Potential Change Order Line Item
  Delete a Potential Change Order Line Item.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `potential_change_order_id` (integer()): Potential Change Order ID
  - `id` (integer()): ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_potential_change_order_id_line_items_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_potential_change_order_id_line_items_id_delete(
        connection,
        procore_company_id,
        potential_change_order_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/potential_change_orders/#{potential_change_order_id}/line_items/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Potential Change Order Line Item
  Return a Potential Change Order Line Item.  Change Event Line Item information is only returned if a line item is associated to a change event line item and user can view change events.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `potential_change_order_id` (integer()): Potential Change Order ID
  - `id` (integer()): ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Default.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_potential_change_order_id_line_items_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Default.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_potential_change_order_id_line_items_id_get(
        connection,
        procore_company_id,
        potential_change_order_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/potential_change_orders/#{potential_change_order_id}/line_items/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Default},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Potential Change Order Line Item
  Update a Potential Change Order Line Item. Note: A budget line item will automatically be created for Non-budgeted line items for all new projects and for projects enabled with Non-Budgeted line item beta functionality

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `potential_change_order_id` (integer()): Potential Change Order ID
  - `id` (integer()): ID
  - `body3` (Body3): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Default.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_potential_change_order_id_line_items_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.Body3.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Default.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_potential_change_order_id_line_items_id_patch(
        connection,
        procore_company_id,
        potential_change_order_id,
        id,
        body3,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/potential_change_orders/#{potential_change_order_id}/line_items/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body3)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Default},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Potential Change Order Line Item
  Create a Potential Change Order Line Item. Note: A budget line item will automatically be created for Non-budgeted line items for all new projects and for projects enabled with Non-Budgeted line item beta functionality

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `potential_change_order_id` (integer()): Potential Change Order ID
  - `body3` (Body3): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Default.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_potential_change_order_id_line_items_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.Body3.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Default.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_potential_change_order_id_line_items_post(
        connection,
        procore_company_id,
        potential_change_order_id,
        body3,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/potential_change_orders/#{potential_change_order_id}/line_items")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body3)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.Default},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Sync Potential Change Order Line Items
  This endpoint creates or updates a batch of Potential Change Order Line Items. See [Using Sync Actions](/documentation/using-sync-actions) for additional information.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `potential_change_order_id` (integer()): Potential Change Order ID
  - `line_item_sync_body` (LineItemSyncBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.ArrayOfPotentialChangeOrderLineItems.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_potential_change_order_id_line_items_sync_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.LineItemSyncBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.ArrayOfPotentialChangeOrderLineItems.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_potential_change_order_id_line_items_sync_patch(
        connection,
        procore_company_id,
        project_id,
        potential_change_order_id,
        line_item_sync_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/potential_change_orders/#{potential_change_order_id}/line_items/sync")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:body, :body, line_item_sync_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ArrayOfPotentialChangeOrderLineItems},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Sync Potential Change Orders
  This endpoint creates or updates a batch of Potential Change Orders (PCO). See [Using Sync Actions](/documentation/using-sync-actions) for additional information.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `contract_id` (integer()): Contract ID
  - `potential_change_order_body` (PotentialChangeOrderBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.ArrayOfPotentialChangeOrders.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_potential_change_orders_sync_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.PotentialChangeOrderBody.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response.t()}
          | {:ok, Procore.Model.ArrayOfPotentialChangeOrders.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_potential_change_orders_sync_patch(
        connection,
        procore_company_id,
        project_id,
        contract_id,
        potential_change_order_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/potential_change_orders/sync")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :contract_id, contract_id)
      |> add_param(:body, :body, potential_change_order_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ArrayOfPotentialChangeOrders},
      {401,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response},
      {403,
       Procore.Model.RestV10CompaniesCompanyIdProjectsProjectIdTaskItemCommentsPost403Response}
    ])
  end
end
