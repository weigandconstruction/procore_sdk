# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreProjectProjectAssignments do
  @moduledoc """
  API calls for all endpoints tagged `CoreProjectProjectAssignments`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Project assignments for a Company User
  This endpoint returns the current and potential Project assignments for the specified User. This includes Project information, as well as the Permission Template and Roles assigned to a given user when they are assigned on a Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[active]"` (boolean()): If true, returns item(s) with a status of 'active'.
    - `:"filters[name]"` ([String.t]): Filter item(s) with matching name.
    - `:"filters[by_stage]"` (RestV11ProjectsGetFiltersByOwnerTypeParameter): Return item(s) with the specified project stage ID(s).
    - `:"filters[by_type]"` (RestV11ProjectsGetFiltersByOwnerTypeParameter): Return item(s) with the specified project type ID(s).
    - `:"filters[by_program]"` (RestV11ProjectsGetFiltersByOwnerTypeParameter): Return item(s) with the specified project program ID(s).
    - `:"filters[by_region]"` (RestV11ProjectsGetFiltersByOwnerTypeParameter): Return item(s) with the specified project region ID(s).
    - `:"filters[by_status]"` (String.t): Return item(s) with the specified status value. Must be one of Active, Inactive, or All.
    - `:sort` (String.t): Sort the results by the specified field.
    - `:direction` (String.t): Sort direction. Default is ascending, nulls first.

  ### Returns

  - `{:ok, [%ProjectAssignmentNormalView{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.ProjectAssignmentNormalView.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[active]" => :query,
      :"filters[name]" => :query,
      :"filters[by_stage]" => :query,
      :"filters[by_type]" => :query,
      :"filters[by_program]" => :query,
      :"filters[by_region]" => :query,
      :"filters[by_status]" => :query,
      :sort => :query,
      :direction => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ProjectAssignmentNormalView},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
