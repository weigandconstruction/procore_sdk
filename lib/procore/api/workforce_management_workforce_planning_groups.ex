# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.WorkforceManagementWorkforcePlanningGroups do
  @moduledoc """
  API calls for all endpoints tagged `WorkforceManagementWorkforcePlanningGroups`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Get All Company Groups
  Gets all Groups in a given Company

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner.t()
             ]}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_get(
        connection,
        procore_company_id,
        company_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Delete a Single Group
  Delete a single Group in a given ID. It should be noted that you can not delete a Group that has active Projects or People belonging to it. This is to prevent those entities from being \"stranded\" in the system if the group you are trying to delete is the single group they belong to. When you try to delete a Group that can not be deleted for this reason, you will be provided with a list of Project and People IDs that belong to this group so you can remove this group ID from those entities if you choose.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_delete(
        connection,
        procore_company_id,
        company_id,
        group_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups/#{group_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Get a Single Group
  Get the single Group in a given ID

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_get(
        connection,
        procore_company_id,
        company_id,
        group_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups/#{group_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Update a Single Group
  Update the single Group in a given ID and body

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_post(
        connection,
        procore_company_id,
        company_id,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups/#{group_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Create a Single Group
  Creates a single Group

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsPost200Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_post(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsPost200Response},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end
end
