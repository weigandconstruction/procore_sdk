# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.QualitySafetyInspectionsChecklistSignatureRequests do
  @moduledoc """
  API calls for all endpoints tagged `QualitySafetyInspectionsChecklistSignatureRequests`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Checklist Signature Requests
  Lists Signature Requests for a specified Checklist

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `list_id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%ChecklistSignatureRequest{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_list_id_signature_requests_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, list(Procore.Model.ChecklistSignatureRequest.t())}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_list_id_signature_requests_get(
        connection,
        procore_company_id,
        list_id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/checklist/lists/#{list_id}/signature_requests")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ChecklistSignatureRequest},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Checklist Signature Request
  Deletes a Signature Request for a specified Checklist.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `list_id` (integer()): Checklist ID
  - `id` (integer()): Signature Request ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_list_id_signature_requests_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_list_id_signature_requests_id_delete(
        connection,
        procore_company_id,
        project_id,
        list_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/checklist/lists/#{list_id}/signature_requests/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Checklist Signature Request
  Retrieves Signature Request for a specified Checklist.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `list_id` (integer()): Checklist ID
  - `id` (integer()): Signature Request ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.ChecklistSignatureRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_list_id_signature_requests_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.ChecklistSignatureRequest.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_list_id_signature_requests_id_get(
        connection,
        procore_company_id,
        project_id,
        list_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/checklist/lists/#{list_id}/signature_requests/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ChecklistSignatureRequest},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Checklist Signature Request
  Creates a Signature Request for a specified Checklist.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `list_id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `checklist_signature_request_create_body` (ChecklistSignatureRequestCreateBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.ChecklistSignatureRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_list_id_signature_requests_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.ChecklistSignatureRequestCreateBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.ChecklistSignatureRequest.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_list_id_signature_requests_post(
        connection,
        procore_company_id,
        list_id,
        project_id,
        checklist_signature_request_create_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/checklist/lists/#{list_id}/signature_requests")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:body, :body, checklist_signature_request_create_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.ChecklistSignatureRequest},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Checklist Signature
  Deletes a Signature for a specified Checklist Signature Request.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `list_id` (integer()): Checklist ID
  - `signature_request_id` (integer()): Checklist Signature Request ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_list_id_signature_requests_signature_request_id_signature_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_list_id_signature_requests_signature_request_id_signature_delete(
        connection,
        procore_company_id,
        list_id,
        signature_request_id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/checklist/lists/#{list_id}/signature_requests/#{signature_request_id}/signature"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Checklist Signature
  Creates a Signature for a specified Checklist Signature Request.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `list_id` (integer()): Checklist ID
  - `signature_request_id` (integer()): Checklist Signature Request ID
  - `project_id` (integer()): Unique identifier for the project.
  - `attachment` (String.t): Attachment representing the Signature. To upload an attachment you must upload the entire payload as `multipart/form-data` content-type and specify each parameter as form-data together with the `signature` file.
  - `opts` (keyword): Optional parameters
    - `:attachment_string` (String.t): Base64 encoded string representing PNG image of signature

  ### Returns

  - `{:ok, Procore.Model.ChecklistSignatureRequest.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_list_id_signature_requests_signature_request_id_signature_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.ChecklistSignatureRequest.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_list_id_signature_requests_signature_request_id_signature_post(
        connection,
        procore_company_id,
        list_id,
        signature_request_id,
        project_id,
        attachment,
        opts \\ []
      ) do
    optional_params = %{
      :attachment_string => :form
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/checklist/lists/#{list_id}/signature_requests/#{signature_request_id}/signature"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:file, :attachment, attachment)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.ChecklistSignatureRequest},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
