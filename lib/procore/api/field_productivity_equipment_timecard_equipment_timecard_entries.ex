# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.FieldProductivityEquipmentTimecardEquipmentTimecardEntries do
  @moduledoc """
  API calls for all endpoints tagged `FieldProductivityEquipmentTimecardEquipmentTimecardEntries`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Bulk Create
  Create equipment timecard entries in a bulk transaction. (Current max is set to 25 timecard entries). NOTE, this endpoint is currently in the experimental stage and is subject to change. Please contact support to be added to the beta group.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10CompaniesCompanyIdProjectsProjectIdEquipmentTimecardEntriesBulkCreatePostRequest): 

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_projects_project_id_equipment_timecard_entries_bulk_create_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) :: {:ok, nil} | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_projects_project_id_equipment_timecard_entries_bulk_create_post(
        connection,
        procore_company_id,
        project_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/companies/#{company_id}/projects/#{project_id}/equipment_timecard_entries/bulk_create"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, false}
    ])
  end
end
