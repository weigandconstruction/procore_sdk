# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementProjectScheduleSchedule do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementProjectScheduleSchedule`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Get Schedule Metadata
  Returns metadata about this Project's Schedule, including information about the Schedule integration configuration for the current project.  #### Schedule Types  | Type                                                 | Key                           | |------------------------------------------------------|-------------------------------| | File-based schedule integration via web browser      | \"Microsoft Project\"           | | File-based schedule integration via Procore Drive    | \"Microsoft Project 2010\"      | | File-based schedule integration via Procore Documents| \"Microsoft Project Documents\" | | Primavera P6 database integration via Procore Drive  | \"Primavera P6\"                |  Note that the schedule types listed as \"Microsoft Project\", \"Microsoft Project 2010\", and \"Microsoft Project Documents\" are functionally identical. In all cases Procore can consume any supported schedule file type and extract data from it, not just Microsoft Project. Schedule files can be uploaded either via Procore Drive, via the Procore Documents tool, or via the Procore Schedule tool, regardless of which of these three types is selected. Where Primavera P6 database integration via Procore Drive is in use, the `p6_id` attribute returned by this API indicates which P6 project Procore Drive is extracting data from. 

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdScheduleGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_schedule_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdScheduleGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_schedule_get(
        connection,
        procore_company_id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/schedule")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdScheduleGet200Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Schedule Metadata
  Updates the Schedule integration type for a project.  #### Schedule Types  | Type                                                 | Key                           | |------------------------------------------------------|-------------------------------| | File-based schedule integration via web browser      | \"Microsoft Project\"           | | File-based schedule integration via Procore Drive    | \"Microsoft Project 2010\"      | | File-based schedule integration via Procore Documents| \"Microsoft Project Documents\" | | Primavera P6 database integration via Procore Drive  | \"Primavera P6\"                |  Note that the schedule types listed as \"Microsoft Project\", \"Microsoft Project 2010\", and \"Microsoft Project Documents\" are functionally identical. In all cases Procore can consume any supported schedule file type and extract data from it, not just Microsoft Project. Schedule files can be uploaded either via Procore Drive, via the Procore Documents tool, or via the Procore Schedule tool, regardless of which of these three types is selected. Where Primavera P6 database integration via Procore Drive is in use, the `p6_id` attribute returned by this API indicates which P6 project Procore Drive is extracting data from. 

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `body15` (Body15): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdScheduleGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_schedule_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.Body15.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdScheduleGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_schedule_patch(
        connection,
        procore_company_id,
        project_id,
        body15,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/schedule")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body15)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdScheduleGet200Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
