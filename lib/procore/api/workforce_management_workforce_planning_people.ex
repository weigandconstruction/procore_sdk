# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.WorkforceManagementWorkforcePlanningPeople do
  @moduledoc """
  API calls for all endpoints tagged `WorkforceManagementWorkforcePlanningPeople`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Get all People belonging to a Group
  Returns array of Person objects.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): This is a **0-based index** representing the page slice of the data you want to retrieve. Each page contains up to **400 items**. ### **ðŸ“Œ Pageable Endpoints** People endpoints that return multiple records **support pagination**. It is recommended to use this feature to prevent network timeouts from excessively large data requests. ### **ðŸ“Œ Response Structure** A successful response will include the following properties: - **`possible_pages`** *(integer)* â†’ Total number of pages available to retrieve all data. - **`current_page`** *(integer)* â†’ The **0-based index** of the page retrieved. - **`data`** *(array)* â†’ List of records returned for the requested page (up to 400 items per page). If a **page value exceeds** `possible_pages`, the `data` property will return an **empty array**. 
    - `:first_name` (String.t): Filter results by the exact first name of the Person.
    - `:last_name` (String.t): Filter results by the exact last name of the Person.
    - `:email` (String.t): Filter results by the exact email address of the Person.
    - `:employee_number` (String.t): Filter results by the exact employee number of the Person.
    - `:custom_fields_integration_name` (String.t): Filter results by a **Custom Field's** `integration_name`. This allows searching based on custom-defined attributes in the system. Example usage: `/v2/companies/{company_id}/...?my_custom_field=northwest` 
    - `:created_at` (Date.t): Filters items based on their creation timestamp. Accepts an ISO 8601 date string. 
    - `:created_before` (Date.t): Filters items created on or before the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:created_after` (Date.t): Filters items created on or after the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:updated_at` (Date.t): Filters items based on their last updated timestamp. Accepts an ISO 8601 date string. 
    - `:updated_before` (Date.t): Filters items updated on or before the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:updated_after` (Date.t): Filters items updated on or after the specified date (inclusive). Accepts an ISO 8601 date string. 

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_groups_people_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner.t()
             ]}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_groups_people_get(
        connection,
        procore_company_id,
        company_id,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :first_name => :query,
      :last_name => :query,
      :email => :query,
      :employee_number => :query,
      :custom_fields_integration_name => :query,
      :created_at => :query,
      :created_before => :query,
      :created_after => :query,
      :updated_at => :query,
      :updated_before => :query,
      :updated_after => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups/#{group_id}/groups/people"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Get all People belonging to a Group
  Returns array of Person objects.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): This is a **0-based index** representing the page slice of the data you want to retrieve. Each page contains up to **400 items**. ### **ðŸ“Œ Pageable Endpoints** People endpoints that return multiple records **support pagination**. It is recommended to use this feature to prevent network timeouts from excessively large data requests. ### **ðŸ“Œ Response Structure** A successful response will include the following properties: - **`possible_pages`** *(integer)* â†’ Total number of pages available to retrieve all data. - **`current_page`** *(integer)* â†’ The **0-based index** of the page retrieved. - **`data`** *(array)* â†’ List of records returned for the requested page (up to 400 items per page). If a **page value exceeds** `possible_pages`, the `data` property will return an **empty array**. 
    - `:first_name` (String.t): Filter results by the exact first name of the Person.
    - `:last_name` (String.t): Filter results by the exact last name of the Person.
    - `:email` (String.t): Filter results by the exact email address of the Person.
    - `:employee_number` (String.t): Filter results by the exact employee number of the Person.
    - `:custom_fields_integration_name` (String.t): Filter results by a **Custom Field's** `integration_name`. This allows searching based on custom-defined attributes in the system. Example usage: `/v2/companies/{company_id}/...?my_custom_field=northwest` 
    - `:created_at` (Date.t): Filters items based on their creation timestamp. Accepts an ISO 8601 date string. 
    - `:created_before` (Date.t): Filters items created on or before the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:created_after` (Date.t): Filters items created on or after the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:updated_at` (Date.t): Filters items based on their last updated timestamp. Accepts an ISO 8601 date string. 
    - `:updated_before` (Date.t): Filters items updated on or before the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:updated_after` (Date.t): Filters items updated on or after the specified date (inclusive). Accepts an ISO 8601 date string. 

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner.t()
             ]}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_get(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :first_name => :query,
      :last_name => :query,
      :email => :query,
      :employee_number => :query,
      :custom_fields_integration_name => :query,
      :created_at => :query,
      :created_before => :query,
      :created_after => :query,
      :updated_at => :query,
      :updated_before => :query,
      :updated_after => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Delete a Person
  Deletes a Person for a given company and person ID

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_delete(
        connection,
        procore_company_id,
        company_id,
        person_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Get a Single Person
  Returns single Person object.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_get(
        connection,
        procore_company_id,
        company_id,
        person_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Remove a Person from a Group
  Removes a person from a given group. Note that when removing the last group_id, the Group IDs can not be empty for an assignable resource or a non-admin person. Therefore, the removing the last group id from an assignable resource or a non-admin person is not allowed.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGroupsPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_groups_group_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGroupsPost200Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_groups_group_id_delete(
        connection,
        procore_company_id,
        company_id,
        person_id,
        group_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}/groups/#{group_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGroupsPost200Response},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Add Person to a Group
  Grant a Person access to or to make them available to a new Group

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGroupsPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGroupsPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_groups_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGroupsPost200Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_groups_post(
        connection,
        procore_company_id,
        company_id,
        person_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}/groups"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGroupsPost200Response},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Update a Person
  Updates a Person for a given company and person ID

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner.t()}
          | {:ok, map()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdPost409Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_post(
        connection,
        procore_company_id,
        company_id,
        person_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeopleGet200ResponseInner},
      {304, %{}},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response},
      {409,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdPost409Response}
    ])
  end

  @doc """
  Add Tag Instance to Person
  Adds a Tag Instance to Person

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdTagsPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_tags_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_tags_post(
        connection,
        procore_company_id,
        company_id,
        person_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}/tags")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Remove Tag Instance from Person
  Removes a Tag Instance from a Person

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `tag_instance_id` (integer()): Unique identifier for the tag instance
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdTagsTagInstanceIdDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_tags_tag_instance_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdTagsTagInstanceIdDelete200Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_tags_tag_instance_id_delete(
        connection,
        procore_company_id,
        company_id,
        person_id,
        tag_instance_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}/tags/#{tag_instance_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdTagsTagInstanceIdDelete200Response},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Revoke a Person's Login
  Revoke a Person's login but leave them in as an assignable resource in the system

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_user_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_user_delete(
        connection,
        procore_company_id,
        company_id,
        person_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}/user")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Enable a Person to Log In
  Enable a Person to log in after they have already been created

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePersonIdUserPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_user_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_user_post(
        connection,
        procore_company_id,
        company_id,
        person_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}/user")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Create a Person
  Creates a Person for a given company ID

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePost409Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_post(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response},
      {409, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdPeoplePost409Response}
    ])
  end
end
