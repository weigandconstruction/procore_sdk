# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreCompanyDirectoryCompanyVendorInsurances do
  @moduledoc """
  API calls for all endpoints tagged `CoreCompanyDirectoryCompanyVendorInsurances`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List company vendor insurances
  Return a list of Insurances from the specified Company Vendor.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `vendor_id` (integer()): Vendor ID
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%Insurance{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_vendors_vendor_id_insurances_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.Insurance.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_vendors_vendor_id_insurances_get(
        connection,
        procore_company_id,
        company_id,
        vendor_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/vendors/#{vendor_id}/insurances")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Insurance},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete company vendor insurance
  Delete the specified Company Vendor Insurance.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `vendor_id` (integer()): Vendor ID
  - `id` (integer()): ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_vendors_vendor_id_insurances_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_vendors_vendor_id_insurances_id_delete(
        connection,
        procore_company_id,
        company_id,
        vendor_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/companies/#{company_id}/vendors/#{vendor_id}/insurances/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show company vendor insurance
  Show detail on the specified Company Vendor Insurance.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `vendor_id` (integer()): Vendor ID
  - `id` (integer()): ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Insurance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_vendors_vendor_id_insurances_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Insurance.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_vendors_vendor_id_insurances_id_get(
        connection,
        procore_company_id,
        company_id,
        vendor_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/vendors/#{vendor_id}/insurances/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Insurance},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update company vendor insurance
  Update the specified Company Vendor Insurance.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `vendor_id` (integer()): Vendor ID
  - `id` (integer()): ID
  - `body33` (Body33): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Insurance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_vendors_vendor_id_insurances_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.Body33.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Insurance.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_vendors_vendor_id_insurances_id_patch(
        connection,
        procore_company_id,
        company_id,
        vendor_id,
        id,
        body33,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/companies/#{company_id}/vendors/#{vendor_id}/insurances/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body33)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Insurance},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create company vendor insurance
  Create a new Insurance associated with the specified Company Vendor.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `vendor_id` (integer()): Vendor ID
  - `body33` (Body33): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Insurance.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_vendors_vendor_id_insurances_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.Body33.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Insurance.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_vendors_vendor_id_insurances_post(
        connection,
        procore_company_id,
        company_id,
        vendor_id,
        body33,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/companies/#{company_id}/vendors/#{vendor_id}/insurances")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body33)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.Insurance},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Sync Company Vendor Insurances
  This endpoint creates or updates a batch of Company Vendor Insurances.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `vendor_id` (integer()): Vendor ID
  - `insurance_sync_body` (InsuranceSyncBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.ArrayOfCompanyVendorInsurances.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_vendors_vendor_id_insurances_sync_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.InsuranceSyncBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.ArrayOfCompanyVendorInsurances.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_vendors_vendor_id_insurances_sync_patch(
        connection,
        procore_company_id,
        company_id,
        vendor_id,
        insurance_sync_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/companies/#{company_id}/vendors/#{vendor_id}/insurances/sync")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, insurance_sync_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ArrayOfCompanyVendorInsurances},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
