# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementModelsBIMViewpointAssociations do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementModelsBIMViewpointAssociations`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Delete Viewpoint and Procore Item association
  Delete the association between a BIM Viewpoint and a procore item.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `bim_viewpoint_id` (integer()): BIM Viewpoint ID
  - `project_id` (integer()): Unique identifier for the project.
  - `item_id` (integer()): Procore Item ID
  - `item_type` (String.t): Procore Item Type
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_viewpoints_bim_viewpoint_id_associations_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_bim_viewpoints_bim_viewpoint_id_associations_delete(
        connection,
        procore_company_id,
        bim_viewpoint_id,
        project_id,
        item_id,
        item_type,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/bim_viewpoints/#{bim_viewpoint_id}/associations")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :item_id, item_id)
      |> add_param(:query, :item_type, item_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Viewpoint and Procore Item association
  A BIM Viewpoint can be associated with other procore items. This API endpoint creates that association.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `bim_viewpoint_id` (integer()): BIM Viewpoint ID
  - `body118` (Body118): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_viewpoints_bim_viewpoint_id_associations_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.Body118.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_bim_viewpoints_bim_viewpoint_id_associations_post(
        connection,
        procore_company_id,
        bim_viewpoint_id,
        body118,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/bim_viewpoints/#{bim_viewpoint_id}/associations")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body118)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
