# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.WorkforceManagementWorkforcePlanningWorkforcePlanningProjects do
  @moduledoc """
  API calls for all endpoints tagged `WorkforceManagementWorkforcePlanningWorkforcePlanningProjects`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Get a Groups Projects
  Get the projects for a given company ID and group ID

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): This is a **0-based index** representing the page slice of the data you want to retrieve. Each page contains up to **400 items**. ### **ðŸ“Œ Pageable Endpoints** People endpoints that return multiple records **support pagination**. It is recommended to use this feature to prevent network timeouts from excessively large data requests. ### **ðŸ“Œ Response Structure** A successful response will include the following properties: - **`possible_pages`** *(integer)* â†’ Total number of pages available to retrieve all data. - **`current_page`** *(integer)* â†’ The **0-based index** of the page retrieved. - **`data`** *(array)* â†’ List of records returned for the requested page (up to 400 items per page). If a **page value exceeds** `possible_pages`, the `data` property will return an **empty array**. 
    - `:name` (String.t): Filters items by their exact name. The query performs an exact match. Example usage: `/v2/companies/{company_id}/...?name=Bridge+Restoration` 
    - `:project_number` (String.t): Filters items by their exact project number. The query performs an exact match. Example usage: `/v2/companies/{company_id}/...?project_number=BR-2024` 
    - `:custom_fields_integration_name` (String.t): Filter results by a **Custom Field's** `integration_name`. This allows searching based on custom-defined attributes in the system. Example usage: `/v2/companies/{company_id}/...?my_custom_field=northwest` 
    - `:created_at` (Date.t): Filters items based on their creation timestamp. Accepts an ISO 8601 date string. 
    - `:created_before` (Date.t): Filters items created on or before the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:created_after` (Date.t): Filters items created on or after the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:updated_at` (Date.t): Filters items based on their last updated timestamp. Accepts an ISO 8601 date string. 
    - `:updated_before` (Date.t): Filters items updated on or before the specified date (inclusive). Accepts an ISO 8601 date string. 
    - `:updated_after` (Date.t): Filters items updated on or after the specified date (inclusive). Accepts an ISO 8601 date string. 

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_projects_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_projects_get(
        connection,
        procore_company_id,
        company_id,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :name => :query,
      :project_number => :query,
      :custom_fields_integration_name => :query,
      :created_at => :query,
      :created_before => :query,
      :created_after => :query,
      :updated_at => :query,
      :updated_before => :query,
      :updated_after => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups/#{group_id}/projects"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  List Company Projects
  Get a list of all projects for a given company ID

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): This is a **0-based index** representing the page slice of the data you want to retrieve. Each page contains up to **400 items**. ### **ðŸ“Œ Pageable Endpoints** People endpoints that return multiple records **support pagination**. It is recommended to use this feature to prevent network timeouts from excessively large data requests. ### **ðŸ“Œ Response Structure** A successful response will include the following properties: - **`possible_pages`** *(integer)* â†’ Total number of pages available to retrieve all data. - **`current_page`** *(integer)* â†’ The **0-based index** of the page retrieved. - **`data`** *(array)* â†’ List of records returned for the requested page (up to 400 items per page). If a **page value exceeds** `possible_pages`, the `data` property will return an **empty array**. 
    - `:name` (String.t): Filters items by their exact name. The query performs an exact match. Example usage: `/v2/companies/{company_id}/...?name=Bridge+Restoration` 
    - `:project_number` (String.t): Filters items by their exact project number. The query performs an exact match. Example usage: `/v2/companies/{company_id}/...?project_number=BR-2024` 
    - `:custom_fields_integration_name` (String.t): Filter results by a **Custom Field's** `integration_name`. This allows searching based on custom-defined attributes in the system. Example usage: `/v2/companies/{company_id}/...?my_custom_field=northwest` 

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_get(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :name => :query,
      :project_number => :query,
      :custom_fields_integration_name => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Create a Project
  Create a Project for a given company ID. When a Project is successfully created, you will be returned the new Project UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPostRequest): 

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t()
             ]}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_post(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Delete Category
  Delete a Category from a Project. Assignments will be moved to the default \"None\" category. A successful response returns the deleted Category ID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `category_id` (String.t): Unique identifier for the Category.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        category_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/categories/#{category_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Update Category Name
  Update a Categoryâ€™s name within a Project. A successful response returns all Categories for the Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `category_id` (String.t): Unique identifier for the Category.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdPost200Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        category_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/categories/#{category_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Add Subcategory to Category
  Add a Subcategory to a Category in a Project. A successful response returns the new Subcategory UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `category_id` (String.t): Unique identifier for the Category.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_subcategories_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_subcategories_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        category_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/categories/#{category_id}/subcategories"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Delete Subcategory
  Delete a Subcategory from a Project. Assignments will lose their subcategory. A successful response returns the deleted Subcategory UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `category_id` (String.t): Unique identifier for the Category.
  - `subcategory_id` (String.t): Unique identifier for the Subcategory.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_subcategories_subcategory_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_subcategories_subcategory_id_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        category_id,
        subcategory_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/categories/#{category_id}/subcategories/#{subcategory_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Update Subcategory Name
  Update a Subcategoryâ€™s name within a Category. A successful response returns the updated Subcategory UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `category_id` (String.t): Unique identifier for the Category.
  - `subcategory_id` (String.t): Unique identifier for the Subcategory.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesSubcategoryIdPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_subcategories_subcategory_id_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_category_id_subcategories_subcategory_id_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        category_id,
        subcategory_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/categories/#{category_id}/subcategories/#{subcategory_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesCategoryIdSubcategoriesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Add Category to Project
  Add a new Category to a Project. Subcategories can also be provided. A successful response returns the new Category UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_categories_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/categories"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdCategoriesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Delete a Single Project
  Delete a single project given a company ID and project ID. When a Project has been successfully deleted, you will receive the Project's ID back as confirmation.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Get a Single Project
  Get a single project given a company ID and project ID

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_get(
        connection,
        procore_company_id,
        company_id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Update a Single Project
  Updats a single project given a company ID and project ID and body params

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Add Role to Project
  Assign a Person to a Role in a Project. A successful response returns the new Role UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdRolesPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdRolesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_roles_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdRolesPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_roles_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/roles"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdRolesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Remove Role from Project
  Remove a Person from a Role in a Project. A successful response returns the removed Role UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `role_id` (String.t): Unique identifier for the Role in the Project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdRolesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_roles_role_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdRolesPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_roles_role_id_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        role_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/roles/#{role_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdRolesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Add Tag Instance to Project
  To make a Tag available to a Project, send a `tag_id` in the POST body. A successful response will return the newly created Tag Instance UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdTagsPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdTagsPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_tags_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdTagsPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_tags_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/tags"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdTagsPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Remove Tag Instance from Project
  Remove a Tag from a Project by specifying its `tag_instance_id`. A successful response returns the removed Tag Instance UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `tag_instance_id` (integer()): Unique identifier for the tag instance
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdTagsPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_tags_tag_instance_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdTagsPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_tags_tag_instance_id_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        tag_instance_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/tags/#{tag_instance_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdTagsPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Add Wage Override
  Add a Wage Override for a specific Job Title in a Project. A successful response returns the new Wage Override UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdWageOverridesPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdWageOverridesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_wage_overrides_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdWageOverridesPost200Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_wage_overrides_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/wage-overrides"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdWageOverridesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Delete Wage Override
  Delete a Wage Override from a Project. A successful response returns the removed Wage Override UUID.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `wage_override_id` (String.t): Unique identifier for the Wage Override.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdWageOverridesPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_wage_overrides_wage_override_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdWageOverridesPost200Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_wage_overrides_wage_override_id_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        wage_override_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/wage-overrides/#{wage_override_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdWageOverridesPost200Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end
end
