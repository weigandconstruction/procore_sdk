# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ConstructionFinancialsCommitmentsLineItemTypesCostTypes do
  @moduledoc """
  API calls for all endpoints tagged `ConstructionFinancialsCommitmentsLineItemTypesCostTypes`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Line Item Types
  Return a list of all defined Line Item Types. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. You must supply either a company_id or project_id.
  - `project_id` (integer()): Unique identifier for the project. You must supply either a company_id or project_id.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[origin_id]"` (String.t): Origin ID

  ### Returns

  - `{:ok, [%LineItemType1{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_line_item_types_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.LineItemType1.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_line_item_types_get(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[origin_id]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/line_item_types")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.LineItemType1},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Line Item Type
  Return detailed information for a specified Line Item Type.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.LineItemType1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_line_item_types_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.LineItemType1.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_line_item_types_id_get(connection, procore_company_id, id, company_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/line_item_types/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.LineItemType1},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Line Item Type
  Update a Line Item Type.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID
  - `body73` (Body73): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.LineItemType1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_line_item_types_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.Body73.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.LineItemType1.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_line_item_types_id_patch(connection, procore_company_id, id, body73, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/line_item_types/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body73)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.LineItemType1},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Line Item Type
  Create a new Line Item Type (e.g. L2 for Labor).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `body73` (Body73): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.LineItemType1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_line_item_types_post(
          Tesla.Env.client(),
          integer(),
          Procore.Model.Body73.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.LineItemType1.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_line_item_types_post(connection, procore_company_id, body73, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/line_item_types")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body73)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.LineItemType1},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Sync Line Item Types
  This endpoint creates or updates a batch of Line Item Types. See [Using Sync Actions](/documentation/using-sync-actions) for additional information.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `line_item_type_sync_body` (LineItemTypeSyncBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10LineItemTypesSyncPatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_line_item_types_sync_patch(
          Tesla.Env.client(),
          integer(),
          Procore.Model.LineItemTypeSyncBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10LineItemTypesSyncPatch200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_line_item_types_sync_patch(
        connection,
        procore_company_id,
        line_item_type_sync_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/line_item_types/sync")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, line_item_type_sync_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10LineItemTypesSyncPatch200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
