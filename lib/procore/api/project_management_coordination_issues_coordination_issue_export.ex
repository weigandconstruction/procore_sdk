# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementCoordinationIssuesCoordinationIssueExport do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementCoordinationIssuesCoordinationIssueExport`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Download Coordination Issues
  Downloads coordination issues to a file specified by the export format. The items to be exported can be scoped by using filters. BCF export will only export the issues with a snapshot and valid camera data.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `export_format` (String.t): Export File Format.
  - `opts` (keyword): Optional parameters
    - `:"filters[assignee_company_id][]"` ([integer()]): Filter item(s) with matching assignee vendor companies.
    - `:"filters[assignee_id][]"` ([integer()]): Filter item(s) with matching assignees.
    - `:"filters[ids][]"` ([integer()]): Filter item(s) with matching ids.
    - `:"filters[location_id][]"` ([integer()]): Filter item(s) with matching locations.
    - `:"filters[search]"` (String.t): Filter item(s) with the matching search query. The search is performed on title and issue number.
    - `:"filters[coordination_issue_file_id][]"` ([integer()]): Filter item(s) with the exact coordination issue file.
    - `:"filters[status][]"` ([String.t]): Filter item(s) with matching status.
    - `:"filters[updated_at]"` (String.t): Filter item(s) within a specific updated at iso8601 datetime range.
    - `:"filters[issue_type][]"` ([String.t]): Filter item(s) with matching issue_type.
    - `:"filters[priority][]"` ([String.t]): Filter item(s) with matching priority.
    - `:"filters[trade_id][]"` ([integer()]): Filter item(s) with matching trades.
    - `:view` (String.t): Export View.
    - `:sort` (String.t): Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'

  ### Returns

  - `{:ok, String.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_coordination_issues_export_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, String}
          | {:error, Tesla.Env.t()}
  def rest_v10_coordination_issues_export_get(
        connection,
        procore_company_id,
        project_id,
        export_format,
        opts \\ []
      ) do
    optional_params = %{
      :"filters[assignee_company_id][]" => :query,
      :"filters[assignee_id][]" => :query,
      :"filters[ids][]" => :query,
      :"filters[location_id][]" => :query,
      :"filters[search]" => :query,
      :"filters[coordination_issue_file_id][]" => :query,
      :"filters[status][]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[issue_type][]" => :query,
      :"filters[priority][]" => :query,
      :"filters[trade_id][]" => :query,
      :view => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/coordination_issues/export")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :export_format, export_format)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {202, false},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
