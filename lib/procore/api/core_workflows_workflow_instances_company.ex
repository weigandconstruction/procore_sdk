# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreWorkflowsWorkflowInstancesCompany do
  @moduledoc """
  API calls for all endpoints tagged `CoreWorkflowsWorkflowInstancesCompany`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Bulk Create Company Workflow Instances
  Asynchronously bulk create workflow instances for a list of company-level items. If an active instance already exists for an item, a failure will be returned for that item.  The returned async operation id can be used to query for status using the [`GET /rest/v2.0/companies/{company_id}/async_operations/{operation_id}`](https://developers.procore.com/reference/rest/operations?version=latest#get-operation-details) API. The result field of the operation contains a list of completed and failed items.  For example: ````json {   \"completed_items\": [     {       \"item_id\": \"123\",       \"instance_id\": \"456\"     }   ],   \"failed_items\": [     {       \"item_id\": \"789\",       \"step\": \"create\",       \"message\": \"Item not found\"   ] } ````

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesBulkCreatePostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesBulkCreatePost202Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_workflows_instances_bulk_create_post(
          Tesla.Env.client(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesBulkCreatePost202Response.t()}
          | {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_workflows_instances_bulk_create_post(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v2.0/companies/#{company_id}/workflows/instances/bulk_create")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {202,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesBulkCreatePost202Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {404, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {422, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end

  @doc """
  List Company Workflow Instances
  Returns a list of workflow instances for a given company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `filters_left_square_brackettool_type_right_square_bracket` (String.t): Filter instances with matching tool type.
  - `opts` (keyword): Optional parameters
    - `:"filters[tool_subtype]"` (integer()): Filter instances by tool subtype.  Required when tool_type is 'correspondence'.
    - `:"filters[item_id]"` (String.t): Filter instances with matching item id.
    - `:"filters[assignee_id]"` (String.t): Filter item(s) with matching current assignee.
    - `:"filters[active]"` (boolean()): Return only items that are active.
    - `:"filters[overdue]"` (boolean()): Return only items whose next workflow step is overdue.
    - `:per_page` (integer()): Elements per page
    - `:cursor` (String.t): Cursor location where the returned list of items are before or after this cursor location.

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_workflows_instances_get(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesGet200Response.t()}
          | {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_workflows_instances_get(
        connection,
        procore_company_id,
        company_id,
        filters_left_square_brackettool_type_right_square_bracket,
        opts \\ []
      ) do
    optional_params = %{
      :"filters[tool_subtype]" => :query,
      :"filters[item_id]" => :query,
      :"filters[assignee_id]" => :query,
      :"filters[active]" => :query,
      :"filters[overdue]" => :query,
      :per_page => :query,
      :cursor => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v2.0/companies/#{company_id}/workflows/instances")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :query,
        :"filters[tool_type]",
        filters_left_square_brackettool_type_right_square_bracket
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesGet200Response},
      {400, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {404, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end

  @doc """
  Get a Company Workflow Instance
  Returns a single workflow instance for a given company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `id` (String.t): Unique identifier for the workflow instance.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesIdGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_workflows_instances_id_get(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesIdGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_workflows_instances_id_get(
        connection,
        procore_company_id,
        company_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v2.0/companies/#{company_id}/workflows/instances/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsInstancesIdGet200Response},
      {400, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {404, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end
end
