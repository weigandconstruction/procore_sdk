# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreProjectDirectoryProjectMemberships do
  @moduledoc """
  API calls for all endpoints tagged `CoreProjectDirectoryProjectMemberships`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Bulk Create Project Memberships
  Bulk Create Project Memberships for many parties on the given Project.  This endpoint can currently only be used to add reference users to a project. It cannot be used to add a user who has a login or to add vendors.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `bulk_create_project_membership_body` (BulkCreateProjectMembershipBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Integer{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_project_memberships_bulk_add_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.BulkCreateProjectMembershipBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [integer()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_project_memberships_bulk_add_post(
        connection,
        procore_company_id,
        project_id,
        bulk_create_project_membership_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/projects/#{project_id}/project_memberships/bulk_add")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, bulk_create_project_membership_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, []},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Project Memberships
  List all Project Memberships on a given Project.  This endpoint returns all Memberships, including inactive Users/Vendors.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%ProjectMembership{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_project_memberships_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.ProjectMembership.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_project_memberships_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/project_memberships")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ProjectMembership},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Project Membership
  Delete a Project Membership for a party on the given Project.  This endpoint can currently only be used to delete reference users from a project. It cannot be used to delete a user who has a login or to delete vendors.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): The ID of the Project Membership
  - `party_id` (integer()): The ID of the Party (reference user)
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_project_memberships_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_project_memberships_id_delete(
        connection,
        procore_company_id,
        project_id,
        id,
        party_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/projects/#{project_id}/project_memberships/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :party_id, party_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Project Membership
  Create a Project Membership for a party on the given Project.  This endpoint can currently only be used to add reference users to a project. It cannot be used to add a user who has a login or to add vendors.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `project_membership_body` (ProjectMembershipBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%Float{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_project_memberships_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.ProjectMembershipBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [float()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_project_memberships_post(
        connection,
        procore_company_id,
        project_id,
        project_membership_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/projects/#{project_id}/project_memberships")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, project_membership_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, []},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Bulk Remove Project Memberships
  Bulk Remove Project Memberships for many parties on the given Project. Currently, the maximum number of party IDs that can be processed in a single request is 1000. If more than 1000 party IDs are provided, only the first 1000 will be processed.  This endpoint can currently only be used to remove reference users from a project. It cannot be used to remove a user who has a login or to remove vendors.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `project_id` (String.t): Unique identifier for the project.
  - `bulk_remove_project_membership_body` (BulkRemoveProjectMembershipBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdProjectMembershipsBulkRemoveDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_projects_project_id_project_memberships_bulk_remove_delete(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          Procore.Model.BulkRemoveProjectMembershipBody.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdProjectMembershipsBulkRemoveDelete200Response.t()}
          | {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_projects_project_id_project_memberships_bulk_remove_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        bulk_remove_project_membership_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v2.0/companies/#{company_id}/projects/#{project_id}/project_memberships/bulk_remove"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, bulk_remove_project_membership_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdProjectMembershipsBulkRemoveDelete200Response},
      {400, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end
end
