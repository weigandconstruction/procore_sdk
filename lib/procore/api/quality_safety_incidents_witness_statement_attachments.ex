# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.QualitySafetyIncidentsWitnessStatementAttachments do
  @moduledoc """
  API calls for all endpoints tagged `QualitySafetyIncidentsWitnessStatementAttachments`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Create Attachment
  Creates an attachment for the specified Witness Statement.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `witness_statement_id` (integer()): Witness Statement ID
  - `attachment` (String.t): Witness Statement Attachment. To upload an attachment you must upload the entire payload as `multipart/form-data` content-type with the `attachment` file.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.IncidentAttachment1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_incidents_witness_statements_witness_statement_id_attachments_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.IncidentAttachment1.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_incidents_witness_statements_witness_statement_id_attachments_post(
        connection,
        procore_company_id,
        project_id,
        witness_statement_id,
        attachment,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/projects/#{project_id}/incidents/witness_statements/#{witness_statement_id}/attachments"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:file, :attachment, attachment)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.IncidentAttachment1},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
