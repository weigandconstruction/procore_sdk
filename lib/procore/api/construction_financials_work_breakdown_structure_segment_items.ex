# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ConstructionFinancialsWorkBreakdownStructureSegmentItems do
  @moduledoc """
  API calls for all endpoints tagged `ConstructionFinancialsWorkBreakdownStructureSegmentItems`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Bulk Delete Company Segment Items
  Bulk Delete Company Segment Items

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `segment_id` (integer()): Segment ID
  - `rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete_request` (RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDeleteRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDelete207Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDeleteRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDelete207Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete(
        connection,
        procore_company_id,
        company_id,
        segment_id,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/companies/#{company_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/bulk_destroy"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {207,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDelete207Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response}
    ])
  end

  @doc """
  List Company Segment Items
  List Segment Items for a specific segment

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `segment_id` (integer()): Segment ID
  - `opts` (keyword): Optional parameters
    - `:segment_item_list_id` (integer()): Used to filter legacy segment items by list. Required for Cost Codes.

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_get(
        connection,
        procore_company_id,
        company_id,
        segment_id,
        opts \\ []
      ) do
    optional_params = %{
      :segment_item_list_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/work_breakdown_structure/segments/#{segment_id}/segment_items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response}
    ])
  end

  @doc """
  Delete Company Segment Item
  Delete a specific Company Segment Item.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `segment_id` (integer()): Segment ID
  - `id` (integer()): Segment Item ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_delete(
        connection,
        procore_company_id,
        company_id,
        segment_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/companies/#{company_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Company Segment Item
  Return details on a specific Company Segment Item.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `segment_id` (integer()): Segment ID
  - `id` (integer()): Segment Item ID
  - `opts` (keyword): Optional parameters
    - `:standard_cost_code_list_id` (integer()): Standard Cost Code List ID (required for cost codes only)

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_get(
        connection,
        procore_company_id,
        company_id,
        segment_id,
        id,
        opts \\ []
      ) do
    optional_params = %{
      :standard_cost_code_list_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response}
    ])
  end

  @doc """
  Update Company Segment Item
  Update a specific Company Segment Item.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `segment_id` (integer()): Segment ID
  - `id` (integer()): Segment Item ID
  - `rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch_request` (RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsIdPatchRequest): 
  - `opts` (keyword): Optional parameters
    - `:standard_cost_code_list_id` (integer()): Standard Cost Code List ID (required for cost codes only)

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch(
        connection,
        procore_company_id,
        company_id,
        segment_id,
        id,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch_request,
        opts \\ []
      ) do
    optional_params = %{
      :standard_cost_code_list_id => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/companies/#{company_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch_request
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Company Segment Item
  Create a Company Segment Item.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `segment_id` (integer()): Segment ID
  - `rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_post_request` (RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_post(
        connection,
        procore_company_id,
        company_id,
        segment_id,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/companies/#{company_id}/work_breakdown_structure/segments/#{segment_id}/segment_items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update All Company Segment Items
  Update All Segment Items with the same attributes. The endpoint currently handles updating status (deactivating or reactivating) for segment items and their children.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `segment_id` (integer()): Segment ID
  - `rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch_request` (RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsUpdateAllPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsUpdateAllPatchRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch(
        connection,
        procore_company_id,
        company_id,
        segment_id,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/companies/#{company_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/update_all"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Bulk Delete Project Segment Items
  Bulk Delete Project Segment Items

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `segment_id` (integer()): Segment ID
  - `rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete_request` (RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDeleteRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDelete207Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDeleteRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDelete207Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete(
        connection,
        procore_company_id,
        project_id,
        segment_id,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/projects/#{project_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/bulk_destroy"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_bulk_destroy_delete_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {207,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsBulkDestroyDelete207Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response}
    ])
  end

  @doc """
  List Project Segment Items
  List Segment Items for a specific segment

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `segment_id` (integer()): Segment ID
  - `opts` (keyword): Optional parameters
    - `:legacy_sub_job_id` (integer()): Used to filter legacy cost codes by sub job. Default will filter by project.

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_get(
        connection,
        procore_company_id,
        project_id,
        segment_id,
        opts \\ []
      ) do
    optional_params = %{
      :legacy_sub_job_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/projects/#{project_id}/work_breakdown_structure/segments/#{segment_id}/segment_items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response}
    ])
  end

  @doc """
  Delete Project Segment Item
  Delete a specific Project Segment Item.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `segment_id` (integer()): Segment ID
  - `id` (integer()): Segment Item ID
  - `opts` (keyword): Optional parameters
    - `:sub_job_id` (integer()): Sub Job ID (required for a sub job's cost codes only)

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_id_delete(
        connection,
        procore_company_id,
        project_id,
        segment_id,
        id,
        opts \\ []
      ) do
    optional_params = %{
      :sub_job_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/projects/#{project_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response}
    ])
  end

  @doc """
  Update Project Segment Item
  Update a specific Project Segment Item. The ID of the record is subject to change under certain conditions, please store the response accordingly.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `segment_id` (integer()): Segment ID
  - `id` (integer()): Segment Item ID
  - `rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch_request` (RestV10ProjectsProjectIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsIdPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch(
        connection,
        procore_company_id,
        project_id,
        segment_id,
        id,
        rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/projects/#{project_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_id_patch_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Project Segment Item
  Create a Project Segment Item

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `segment_id` (integer()): Segment ID
  - `rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_post_request` (RestV10ProjectsProjectIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_post(
        connection,
        procore_company_id,
        project_id,
        segment_id,
        rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/projects/#{project_id}/work_breakdown_structure/segments/#{segment_id}/segment_items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201,
       Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update All Project Segment Items
  Update All Segment Items with the same attributes. The endpoint currently handles updating status (deactivating or reactivating) for segment items and their children.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `segment_id` (integer()): Segment ID
  - `rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch_request` (RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsUpdateAllPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdWorkBreakdownStructureSegmentsSegmentIdSegmentItemsUpdateAllPatchRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch(
        connection,
        procore_company_id,
        project_id,
        segment_id,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/projects/#{project_id}/work_breakdown_structure/segments/#{segment_id}/segment_items/update_all"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_work_breakdown_structure_segments_segment_id_segment_items_update_all_patch_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404,
       Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdSubcontractorScheduleOfValuesStatusPatch404Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
