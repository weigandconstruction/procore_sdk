# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementMeetingsMeetingTopics do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementMeetingsMeetingTopics`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Update meeting topic
  Update an existing Meeting Topic.  #### Uploading attachments To upload attachments you must upload the entire payload as `multipart/form-data` content-type and specify each parameter as form-data together with `attachments[]` as files.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID of the meeting topic
  - `body67` (Body67): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10MeetingsPost201ResponseMeetingCategoriesInnerMeetingTopicInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_meeting_topics_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.Body67.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10MeetingsPost201ResponseMeetingCategoriesInnerMeetingTopicInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_meeting_topics_id_patch(connection, procore_company_id, id, body67, _opts \\ []) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/meeting_topics/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body67)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10MeetingsPost201ResponseMeetingCategoriesInnerMeetingTopicInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Get the minutes and date created for all parent topics
  Returns an array of objects of minutes and created_on values for all parent meeting topics

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `meeting_id` (integer()): ID of the meeting
  - `meeting_topic_id` (integer()): ID of the meeting topic
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10MeetingTopicsParentMinutesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_meeting_topics_parent_minutes_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10MeetingTopicsParentMinutesGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_meeting_topics_parent_minutes_get(
        connection,
        procore_company_id,
        meeting_id,
        meeting_topic_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/meeting_topics/parent_minutes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :meeting_id, meeting_id)
      |> add_param(:query, :meeting_topic_id, meeting_topic_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10MeetingTopicsParentMinutesGet200ResponseInner},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create meeting topic
  Creates Meeting Topic.  #### Uploading attachments To upload attachments you must upload the entire payload as `multipart/form-data` content-type and specify each parameter as form-data together with `attachments[]` as files.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `body67` (Body67): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10MeetingsPost201ResponseMeetingCategoriesInnerMeetingTopicInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_meeting_topics_post(
          Tesla.Env.client(),
          integer(),
          Procore.Model.Body67.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10MeetingsPost201ResponseMeetingCategoriesInnerMeetingTopicInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_meeting_topics_post(connection, procore_company_id, body67, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/meeting_topics")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body67)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV10MeetingsPost201ResponseMeetingCategoriesInnerMeetingTopicInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update meeting topic
  Update an existing Meeting Topic.  #### Uploading attachments To upload attachments you must upload the entire payload as `multipart/form-data` content-type and specify each parameter as form-data together with `attachments[]` as files.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): ID of the Meeting Topic
  - `body66` (Body66): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV11ProjectsProjectIdMeetingTopicsPost201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_meeting_topics_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.Body66.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV11ProjectsProjectIdMeetingTopicsPost201Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_meeting_topics_id_patch(
        connection,
        procore_company_id,
        project_id,
        id,
        body66,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.1/projects/#{project_id}/meeting_topics/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body66)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV11ProjectsProjectIdMeetingTopicsPost201Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Get the minutes and date created for all parent topics
  Returns an array of objects of minutes and created_on values for all parent meeting topics

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `meeting_id` (integer()): ID of the meeting
  - `meeting_topic_id` (integer()): ID of the meeting topic
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV11ProjectsProjectIdMeetingTopicsMeetingTopicIdParentMinutesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_meeting_topics_meeting_topic_id_parent_minutes_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV11ProjectsProjectIdMeetingTopicsMeetingTopicIdParentMinutesGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_meeting_topics_meeting_topic_id_parent_minutes_get(
        connection,
        procore_company_id,
        project_id,
        meeting_id,
        meeting_topic_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.1/projects/#{project_id}/meeting_topics/#{meeting_topic_id}/parent_minutes"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :meeting_id, meeting_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV11ProjectsProjectIdMeetingTopicsMeetingTopicIdParentMinutesGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create meeting topic
  Creates Meeting Topic.  #### Uploading attachments To upload attachments you must upload the entire payload as `multipart/form-data` content-type and specify each parameter as form-data together with `attachments[]` as files.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `body66` (Body66): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV11ProjectsProjectIdMeetingTopicsPost201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_meeting_topics_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.Body66.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV11ProjectsProjectIdMeetingTopicsPost201Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_meeting_topics_post(
        connection,
        procore_company_id,
        project_id,
        body66,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.1/projects/#{project_id}/meeting_topics")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body66)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV11ProjectsProjectIdMeetingTopicsPost201Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
