# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementModelsBIMModelRevisions do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementModelsBIMModelRevisions`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List BIM Model Revisions
  Lists BIM Model Revisions associated with the specified Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:view` (String.t): The compact view contains only ids. The normal view does not include the attribute 'published_model', and contains 'bim_gridline_id' instead of object. The extended view contains the response shown below. The default view is normal.
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[bim_file_id]"` (integer()): Filter item(s) with matching BIM File ids
    - `:"filters[bim_model_id]"` (integer()): Filter item(s) with matching Bim Model ids.
    - `:"filters[publish_status]"` (String.t): Filter item(s) by publish status
    - `:sort` (String.t): Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'

  ### Returns

  - `{:ok, [%RestV10BimModelRevisionsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_model_revisions_get(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10BimModelRevisionsGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_bim_model_revisions_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :view => :query,
      :"filters[id]" => :query,
      :"filters[bim_file_id]" => :query,
      :"filters[bim_model_id]" => :query,
      :"filters[publish_status]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/bim_model_revisions")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete BIM Model Revision
  Delete a BIM Model Revision from the system.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): BIM Model Revision ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_model_revisions_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_bim_model_revisions_id_delete(
        connection,
        procore_company_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/bim_model_revisions/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show BIM Model Revision
  Return a single BIM Model Revision.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): BIM Model Revision ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): The compact view contains only ids. The normal view does not include the attribute 'published_model', and contains 'bim_gridline_id' instead of object. The extended view contains the response shown below. The default view is normal.

  ### Returns

  - `{:ok, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_model_revisions_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_bim_model_revisions_id_get(
        connection,
        procore_company_id,
        id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/bim_model_revisions/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update BIM Model Revision
  Update a BIM Model Revision. The attributes `published_model_upload_uuid` and `object_definition_upload_uuid` should only be provided if the model is not associated to any upload. If a model is already associated to an upload, providing these attributes will cause error response.   For 3d files converted to Procore's format using BIM File Extractions API, the `geometry_file_id` can be retrieved via [BIM File Extraction API](https://developers.procore.com/reference/rest/v1/bim-file-extractions?version=1.0#show-bim-file-extraction) using the following JSONPath:      $.extraction_items.artifact.mobile_format.id  In a similar manner, the `property_file_id` can be retrieved via [BIM File Extraction API](https://developers.procore.com/reference/rest/v1/bim-file-extractions?version=1.0#show-bim-file-extraction) using the following JSONPath:      $.extraction_items.artifact.properties.id    Note that in the response for this BIM Model Revision endpoint, `geometry_file_id` will be designated as `published_model.id`, and `property_file_id` will be designated as `object_definition.id`.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): BIM Model Revision ID
  - `body135` (Body135): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_model_revisions_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.Body135.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_bim_model_revisions_id_patch(
        connection,
        procore_company_id,
        id,
        body135,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/bim_model_revisions/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body135)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create BIM Model Revision
  Create a Revision for a BIM Model. If a set of upload UUIDs or model artifact references are not provided, the revision will be created with 'unpublished' publish status.   For 3d files converted to Procore's format using BIM File Extractions API, the `geometry_file_id` can be retrieved via [BIM File Extraction API](https://developers.procore.com/reference/rest/v1/bim-file-extractions?version=1.0#show-bim-file-extraction) using the following JSONPath:      $.extraction_items.artifact.mobile_format.id  In a similar manner, the `property_file_id` can be retrieved via [BIM File Extraction API](https://developers.procore.com/reference/rest/v1/bim-file-extractions?version=1.0#show-bim-file-extraction) using the following JSONPath:      $.extraction_items.artifact.properties.id    Note that in the response for this BIM Model Revision endpoint, `geometry_file_id` will be designated as `published_model.id`, and `property_file_id` will be designated as `object_definition.id`.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `body134` (Body134): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_model_revisions_post(
          Tesla.Env.client(),
          integer(),
          Procore.Model.Body134.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_bim_model_revisions_post(connection, procore_company_id, body134, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/bim_model_revisions")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body134)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV10BimModelRevisionsGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
