# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.QualitySafetyInspectionsCompanyInspectionTemplateItems do
  @moduledoc """
  API calls for all endpoints tagged `QualitySafetyInspectionsCompanyInspectionTemplateItems`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Company Inspection Template Items
  Returns a collection of Checklist Template Items for a specified Checklist Template.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `inspection_template_id` (integer()): The ID of the Company Inspection Template
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%CompanyInspectionTemplateItem{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.CompanyInspectionTemplateItem.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_get(
        connection,
        procore_company_id,
        company_id,
        inspection_template_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/inspection_templates/#{inspection_template_id}/items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.CompanyInspectionTemplateItem},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Company Inspection Template Item
  Deletes a Company Inspection Template Item for a specified Company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `inspection_template_id` (integer()): The ID of the Company Inspection Template
  - `id` (integer()): Company Inspection Template Item ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_id_delete(
        connection,
        procore_company_id,
        company_id,
        inspection_template_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/companies/#{company_id}/inspection_templates/#{inspection_template_id}/items/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Company Inspection Template Item
  Returns the details for a specified Company Inspection Template Item

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `inspection_template_id` (integer()): The ID of the Company Inspection Template
  - `id` (integer()): Company Inspection Template Item ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.CompanyInspectionTemplateItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.CompanyInspectionTemplateItem.t()}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_id_get(
        connection,
        procore_company_id,
        company_id,
        inspection_template_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/inspection_templates/#{inspection_template_id}/items/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.CompanyInspectionTemplateItem},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Company Inspection Template Item
  Updates a Company Inspection Template Item for a specified Company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `inspection_template_id` (integer()): The ID of the Company Inspection Template
  - `id` (integer()): Company Inspection Template Item ID
  - `project_inspection_template_item_body` (ProjectInspectionTemplateItemBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.CompanyInspectionTemplateItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.ProjectInspectionTemplateItemBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.CompanyInspectionTemplateItem.t()}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_id_patch(
        connection,
        procore_company_id,
        company_id,
        inspection_template_id,
        id,
        project_inspection_template_item_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/companies/#{company_id}/inspection_templates/#{inspection_template_id}/items/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, project_inspection_template_item_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.CompanyInspectionTemplateItem},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Company Inspection Template Item
  Creates a Company Inspection Template Item for a specified Checklist Template.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `inspection_template_id` (integer()): The ID of the Company Inspection Template
  - `company_inspection_template_item_body` (CompanyInspectionTemplateItemBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.CompanyInspectionTemplateItem.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.CompanyInspectionTemplateItemBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.CompanyInspectionTemplateItem.t()}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_inspection_templates_inspection_template_id_items_post(
        connection,
        procore_company_id,
        company_id,
        inspection_template_id,
        company_inspection_template_item_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/companies/#{company_id}/inspection_templates/#{inspection_template_id}/items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, company_inspection_template_item_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.CompanyInspectionTemplateItem},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
