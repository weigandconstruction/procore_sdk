# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.UtilitiesWebhooksTriggers do
  @moduledoc """
  API calls for all endpoints tagged `UtilitiesWebhooksTriggers`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Bulk Delete Triggers
  Delete multiple webhook triggers in a single request. All triggers must be within the same hook, and provide company and/or project scope. Max 500 triggers.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `hook_id` (integer()): Webhooks Hook ID
  - `rest_v10_webhooks_hooks_hook_id_triggers_bulk_delete_request` (RestV10WebhooksHooksHookIdTriggersBulkDeleteRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkDelete200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_webhooks_hooks_hook_id_triggers_bulk_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkDeleteRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, nil}
          | {:ok, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkDelete207Response.t()}
          | {:ok, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkDelete200Response.t()}
          | {:ok, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost413Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_webhooks_hooks_hook_id_triggers_bulk_delete(
        connection,
        procore_company_id,
        hook_id,
        rest_v10_webhooks_hooks_hook_id_triggers_bulk_delete_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/webhooks/hooks/#{hook_id}/triggers/bulk")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_webhooks_hooks_hook_id_triggers_bulk_delete_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkDelete200Response},
      {207, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkDelete207Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {413, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost413Response},
      {500, false}
    ])
  end

  @doc """
  Bulk Create Triggers
  Create multiple webhook triggers in a single request. All triggers must be within the same hook, and provide company and/or project scope. Max 500 triggers.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `hook_id` (integer()): Webhooks Hook ID
  - `rest_v10_webhooks_hooks_hook_id_triggers_bulk_post_request` (RestV10WebhooksHooksHookIdTriggersBulkPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_webhooks_hooks_hook_id_triggers_bulk_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, nil}
          | {:ok, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost207Response.t()}
          | {:ok, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost413Response.t()}
          | {:ok, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_webhooks_hooks_hook_id_triggers_bulk_post(
        connection,
        procore_company_id,
        hook_id,
        rest_v10_webhooks_hooks_hook_id_triggers_bulk_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/webhooks/hooks/#{hook_id}/triggers/bulk")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_webhooks_hooks_hook_id_triggers_bulk_post_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost200Response},
      {207, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost207Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {413, Procore.Model.RestV10WebhooksHooksHookIdTriggersBulkPost413Response},
      {500, false}
    ])
  end

  @doc """
  List Webhooks Triggers
  Triggers must be listed within a company and/or project scope.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `hook_id` (integer()): Webhooks Hook ID
  - `company_id` (integer()): Unique identifier for the company. You must supply either a company_id or project_id.
  - `project_id` (integer()): Unique identifier for the project. You must supply either a company_id or project_id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%WebhooksTrigger{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_webhooks_hooks_hook_id_triggers_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, list(Procore.Model.WebhooksTrigger.t())}
          | {:error, Tesla.Env.t()}
  def rest_v10_webhooks_hooks_hook_id_triggers_get(
        connection,
        procore_company_id,
        hook_id,
        company_id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/webhooks/hooks/#{hook_id}/triggers")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.WebhooksTrigger},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Webhooks Trigger
  Triggers must be deleted within a company and/or project scope.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `hook_id` (integer()): Webhooks Hook ID
  - `id` (integer()): Webhooks Trigger ID
  - `company_id` (integer()): Unique identifier for the company. You must supply either a company_id or project_id.
  - `project_id` (integer()): Unique identifier for the project. You must supply either a company_id or project_id.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_webhooks_hooks_hook_id_triggers_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_webhooks_hooks_hook_id_triggers_id_delete(
        connection,
        procore_company_id,
        hook_id,
        id,
        company_id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/webhooks/hooks/#{hook_id}/triggers/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Webhooks Trigger
  Triggers must be created within a company and/or project scope.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `hook_id` (integer()): Webhooks Hook ID
  - `rest_v10_webhooks_hooks_hook_id_triggers_post_request` (RestV10WebhooksHooksHookIdTriggersPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.WebhooksTrigger.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_webhooks_hooks_hook_id_triggers_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10WebhooksHooksHookIdTriggersPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.WebhooksTrigger.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_webhooks_hooks_hook_id_triggers_post(
        connection,
        procore_company_id,
        hook_id,
        rest_v10_webhooks_hooks_hook_id_triggers_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/webhooks/hooks/#{hook_id}/triggers")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_webhooks_hooks_hook_id_triggers_post_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.WebhooksTrigger},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
