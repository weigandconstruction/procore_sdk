# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementSubmittalsSubmittalLogs do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementSubmittalsSubmittalLogs`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Submittals
  This is a deprecated endpoint. Please use /submittals endpoint.  See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:"filters[approved_id]"` (String.t): 
    - `:"filters[ball_in_court]"` (String.t): 
    - `:"filters[date_range]"` (String.t): 
    - `:"filters[due_by]"` (Date.t): 
    - `:"filters[end_date]"` (Date.t): 
    - `:"filters[include_sublocations]"` (boolean()): Use together with `filters[location_id]` 
    - `:"filters[location_id]"` ([integer()]): Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
    - `:"filters[only_current_revision]"` (integer()): 
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:"filters[received_from_id]"` (integer()): Received From ID
    - `:"filters[response]"` (String.t): 
    - `:"filters[responsible_contractor_id]"` (integer()): Responsible Contractor ID
    - `:"filters[spec_division]"` (String.t): 
    - `:"filters[spec_section_id]"` (String.t): 
    - `:"filters[start_date]"` (Date.t): 
    - `:"filters[status]"` ([String.t]): Returns item(s) matching the specified status value.
    - `:"filters[submittal_type]"` (String.t): 
    - `:"filters[submittal_package_id]"` ([integer()]): Array of Submittal Package IDs. Returns item(s) associated with the specified Submittal Package IDs. A single integer value is also accepted.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10SubmittalLogsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_submittal_logs_get(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10SubmittalLogsGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_submittal_logs_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :"filters[approved_id]" => :query,
      :"filters[ball_in_court]" => :query,
      :"filters[date_range]" => :query,
      :"filters[due_by]" => :query,
      :"filters[end_date]" => :query,
      :"filters[include_sublocations]" => :query,
      :"filters[location_id]" => :query,
      :"filters[only_current_revision]" => :query,
      :"filters[query]" => :query,
      :"filters[received_from_id]" => :query,
      :"filters[response]" => :query,
      :"filters[responsible_contractor_id]" => :query,
      :"filters[spec_division]" => :query,
      :"filters[spec_section_id]" => :query,
      :"filters[start_date]" => :query,
      :"filters[status]" => :query,
      :"filters[submittal_type]" => :query,
      :"filters[submittal_package_id]" => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/submittal_logs")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10SubmittalLogsGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Submittal
  This is a deprecated endpoint. Please use /submittals/{id} endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): ID of Submittal
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10SubmittalLogsIdGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_submittal_logs_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10SubmittalLogsIdGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_submittal_logs_id_get(connection, procore_company_id, id, project_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/submittal_logs/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10SubmittalLogsIdGet200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
