# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.QualitySafetyInspectionsInspectionItemSignatures do
  @moduledoc """
  API calls for all endpoints tagged `QualitySafetyInspectionsInspectionItemSignatures`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Deletes an Inspection Item Signature
  Deletes an Inspection Item Signature for a specified Inspection Item Signature Request.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `project_id` (String.t): Unique identifier for the project.
  - `item_id` (String.t): Unique identifier for the inspection item.
  - `id` (String.t): Unique identifier for the inspection item signature request.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_projects_project_id_inspection_items_item_id_signature_requests_id_signature_delete(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_projects_project_id_inspection_items_item_id_signature_requests_id_signature_delete(
        connection,
        procore_company_id,
        company_id,
        project_id,
        item_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v2.0/companies/#{company_id}/projects/#{project_id}/inspection_items/#{item_id}/signature_requests/#{id}/signature"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {422, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end

  @doc """
  Creates a Inspection Item Signature Request
  Creates a Inspection Item Signature Request for a specified Inspection.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `project_id` (String.t): Unique identifier for the project.
  - `item_id` (String.t): Unique identifier for the inspection item.
  - `id` (String.t): Unique identifier for the inspection item signature request.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV20CompaniesCompanyIdProjectsProjectIdInspectionItemsItemIdSignatureRequestsIdSignaturePostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdInspectionItemsItemIdSignatureRequestsIdSignaturePost201Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_projects_project_id_inspection_items_item_id_signature_requests_id_signature_post(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdInspectionItemsItemIdSignatureRequestsIdSignaturePost201Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_projects_project_id_inspection_items_item_id_signature_requests_id_signature_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        item_id,
        id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v2.0/companies/#{company_id}/projects/#{project_id}/inspection_items/#{item_id}/signature_requests/#{id}/signature"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdInspectionItemsItemIdSignatureRequestsIdSignaturePost201Response},
      {400, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {422, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end
end
