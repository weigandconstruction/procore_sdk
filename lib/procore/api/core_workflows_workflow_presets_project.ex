# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreWorkflowsWorkflowPresetsProject do
  @moduledoc """
  API calls for all endpoints tagged `CoreWorkflowsWorkflowPresetsProject`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Workflow Presets
  Get a list of Workflow Presets

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `project_id` (String.t): Unique identifier for the project.
  - `filters_left_square_brackettool_type_right_square_bracket` (String.t): Filter by tool type
  - `opts` (keyword): Optional parameters
    - `:per_page` (integer()): Elements per page
    - `:"filters[tool_subtype]"` (String.t): Filter by tool subtype

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_projects_project_id_workflows_presets_get(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsGet200Response.t()}
          | {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_projects_project_id_workflows_presets_get(
        connection,
        procore_company_id,
        company_id,
        project_id,
        filters_left_square_brackettool_type_right_square_bracket,
        opts \\ []
      ) do
    optional_params = %{
      :per_page => :query,
      :"filters[tool_subtype]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v2.0/companies/#{company_id}/projects/#{project_id}/workflows/presets")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :query,
        :"filters[tool_type]",
        filters_left_square_brackettool_type_right_square_bracket
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsGet200Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {404, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end

  @doc """
  Update Assignees and Workflow Manager
  Updates assignees and workflow manager for a workflow preset for a project tool.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `project_id` (String.t): Unique identifier for the project.
  - `id` (String.t): Unique identifier for the resource.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsIdAssigneesPatchRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsIdAssigneesPatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_projects_project_id_workflows_presets_id_assignees_patch(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsIdAssigneesPatch200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_projects_project_id_workflows_presets_id_assignees_patch(
        connection,
        procore_company_id,
        company_id,
        project_id,
        id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v2.0/companies/#{company_id}/projects/#{project_id}/workflows/presets/#{id}/assignees"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsIdAssigneesPatch200Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {404, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {422, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end

  @doc """
  Get Workflow Preset
  Get details of a specific workflow preset.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `project_id` (String.t): Unique identifier for the project.
  - `id` (String.t): Unique identifier for the workflow preset
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsIdGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_projects_project_id_workflows_presets_id_get(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsIdGet200Response.t()}
          | {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_projects_project_id_workflows_presets_id_get(
        connection,
        procore_company_id,
        company_id,
        project_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v2.0/companies/#{company_id}/projects/#{project_id}/workflows/presets/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdWorkflowsPresetsIdGet200Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {404, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end
end
