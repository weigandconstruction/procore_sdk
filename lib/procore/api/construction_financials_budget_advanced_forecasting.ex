# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ConstructionFinancialsBudgetAdvancedForecasting do
  @moduledoc """
  API calls for all endpoints tagged `ConstructionFinancialsBudgetAdvancedForecasting`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Get Advanced Forecasting Rows of a Project
  Get Advanced forecasting rows. Each page will have a maximum of 100 items.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `project_id` (String.t): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:budget_view_id` (String.t): Unique identifier for the Budget View (also known as Budget Template). Required to return spread amount for other curves besides manual.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:filters` ([Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsGetFiltersParameterInner.t]): Array structure to filter the result of the advanced forecasting endpoint Supported filter objects (with and without budget_view_id):   - WBS segment item filter     Structure:       - id: <segment_id>       - tier: <segment_tier>       - type: 'segment'       - values: <array of segment item ids>        Example:     `{\"id\": \"23\", tier: <segment_tier>, \"type\": \"segment\", \"values\": [2]}`      URL example:     https://app.procore.com/rest/v2.0/companies/<company_id>/projects/<project_id>/advanced_forecastings/rows?filters[][id]=23&filters[][tier]=1&filters[][type]=segment&filters[][values][]=2&page=1&per_page=100&budget_view_id=2  Supported filters only if budget_view_id is provided:   - Actuals by date     Structure:       - id: 'date_range_for_actuals'       - code: 'date_range_for_actuals'       - type: 'date_range_for_actuals'       - values: [`<start_date>(YYYY-MM-DD)`, `<end_date>(YYYY-MM-DD)`, `<include_actuals_without_dates (boolean)>`].          Example:     `{\"id\": \"date_range_for_actuals\", \"code\": \"date_range_for_actuals\", \"type\": \"date_range_for_actuals\", \"values\": [\"2021-01-01\", \"2021-01-31\", false]}`      URL Example:     https://app.procore.com/rest/v2.0/companies/<company_id>/projects/<project_id>/advanced_forecastings/rows?filters[][code]=date_range_for_actuals&filters[][id]=date_range_for_actuals&filters[][type]=date_range_for_actuals&filters[][values][]=2021-01-01&filters[][values][]=2021-01-31&filters[][values][]=false&page=1&per_page=100&budget_view_id=2

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_projects_project_id_advanced_forecastings_rows_get(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsGet200Response.t()}
          | {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_projects_project_id_advanced_forecastings_rows_get(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :budget_view_id => :query,
      :page => :query,
      :per_page => :query,
      :filters => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v2.0/companies/#{company_id}/projects/#{project_id}/advanced_forecastings/rows"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsGet200Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end

  @doc """
  Update Advanced Forecasting Rows
  Update Advanced Forecasting Rows

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (String.t): Unique identifier for the company.
  - `project_id` (String.t): Unique identifier for the project.
  - `rest_v20_companies_company_id_projects_project_id_advanced_forecastings_rows_post_request` (RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v20_companies_company_id_projects_project_id_advanced_forecastings_rows_post(
          Tesla.Env.client(),
          integer(),
          String.t(),
          String.t(),
          Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsPostRequest.t(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsGet200Response.t()}
          | {:ok, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v20_companies_company_id_projects_project_id_advanced_forecastings_rows_post(
        connection,
        procore_company_id,
        company_id,
        project_id,
        rest_v20_companies_company_id_projects_project_id_advanced_forecastings_rows_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v2.0/companies/#{company_id}/projects/#{project_id}/advanced_forecastings/rows"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v20_companies_company_id_projects_project_id_advanced_forecastings_rows_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV20CompaniesCompanyIdProjectsProjectIdAdvancedForecastingsRowsGet200Response},
      {401, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {403, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response},
      {422, Procore.Model.RestV20CompaniesCompanyIdWorkflowsToolsGet401Response}
    ])
  end
end
