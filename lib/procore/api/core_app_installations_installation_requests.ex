# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreAppInstallationsInstallationRequests do
  @moduledoc """
  API calls for all endpoints tagged `CoreAppInstallationsInstallationRequests`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List app installations
  Returns a list of app installation requests on a given company

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `developer_app_id` (String.t): Developer App ID
  - `implicit` (boolean()): False if the request was made via API, true if it was made on attempting to authenticate an app 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10InstallationRequestsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_installation_requests_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          boolean(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10InstallationRequestsGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_installation_requests_get(
        connection,
        procore_company_id,
        company_id,
        developer_app_id,
        implicit,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/installation_requests")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :company_id, company_id)
      |> add_param(:query, :developer_app_id, developer_app_id)
      |> add_param(:query, :implicit, implicit)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10InstallationRequestsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create installation request
  Request to install a new application

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `body73` (Body73): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10InstallationRequestsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_installation_requests_post(
          Tesla.Env.client(),
          integer(),
          Procore.Model.Body73.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10InstallationRequestsGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_installation_requests_post(connection, procore_company_id, body73, _opts \\ []) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/installation_requests")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body73)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV10InstallationRequestsGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {409, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
