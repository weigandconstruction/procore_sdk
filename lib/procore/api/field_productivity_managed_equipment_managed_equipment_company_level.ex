# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.FieldProductivityManagedEquipmentManagedEquipmentCompanyLevel do
  @moduledoc """
  API calls for all endpoints tagged `FieldProductivityManagedEquipmentManagedEquipmentCompanyLevel`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Bulk Delete Managed Equipment
  Delete multiple Managed Equipment with one request.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `rest_v10_companies_company_id_managed_equipment_bulk_destroy_delete_request` (RestV10CompaniesCompanyIdManagedEquipmentBulkDestroyDeleteRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_bulk_destroy_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdManagedEquipmentBulkDestroyDeleteRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_bulk_destroy_delete(
        connection,
        procore_company_id,
        company_id,
        rest_v10_companies_company_id_managed_equipment_bulk_destroy_delete_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/bulk_destroy")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_managed_equipment_bulk_destroy_delete_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Bulk Retrieve Managed Equipment
  Restore multiple Managed Equipment with one request.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `rest_v10_companies_company_id_managed_equipment_bulk_restore_patch_request` (RestV10CompaniesCompanyIdManagedEquipmentBulkRestorePatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_bulk_restore_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdManagedEquipmentBulkRestorePatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_bulk_restore_patch(
        connection,
        procore_company_id,
        company_id,
        rest_v10_companies_company_id_managed_equipment_bulk_restore_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/bulk_restore")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_managed_equipment_bulk_restore_patch_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List all Equipment
  Return a list of all Equipment with details for a specified company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[managed_equipment_id]"` (integer()): Return item(s) with the specified Managed Equipment ID.
    - `:"filters[managed_equipment_category_id]"` (integer()): Return item(s) with the specified Managed Equipment Category ID.
    - `:"filters[managed_equipment_type_id]"` (integer()): Return item(s) with the specified Managed Equipment Type ID.
    - `:"filters[managed_equipment_make_id]"` (integer()): Return item(s) with the specified Managed Equipment Make ID.
    - `:"filters[managed_equipment_model_id]"` (integer()): Return item(s) with the specified Managed Equipment Model ID.
    - `:"filters[company_visible]"` (boolean()): If true, return item(s) with 'company visible' status.
    - `:"filters[current_project_id]"` (integer()): Return item(s) with the specified current project ID.
    - `:"filters[year]"` (integer()): Return item(s) with the specified year.
    - `:"filters[status]"` ([String.t]): Returns item(s) matching the specified status value.
    - `:"filters[last_service_date]"` (String.t): Return item(s) with a last service date within the specified ISO 8601 datetime range.
    - `:"filters[next_service_date]"` (String.t): Return item(s) with a next service date within the specified ISO 8601 datetime range.

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_get(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[updated_at]" => :query,
      :"filters[managed_equipment_id]" => :query,
      :"filters[managed_equipment_category_id]" => :query,
      :"filters[managed_equipment_type_id]" => :query,
      :"filters[managed_equipment_make_id]" => :query,
      :"filters[managed_equipment_model_id]" => :query,
      :"filters[company_visible]" => :query,
      :"filters[current_project_id]" => :query,
      :"filters[year]" => :query,
      :"filters[status]" => :query,
      :"filters[last_service_date]" => :query,
      :"filters[next_service_date]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Equipment Change History
  Return Equipment change history detailed information.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.ManagedEquipmentChangeHistory.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_id_change_history_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.ManagedEquipmentChangeHistory.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_id_change_history_get(
        connection,
        procore_company_id,
        company_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/#{id}/change_history")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ManagedEquipmentChangeHistory},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Equipment
  Deleting a piece of Equipment

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): Id of the Equipment
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_id_delete(
        connection,
        procore_company_id,
        company_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Equipment
  Return Equipment detailed information.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_id_get(
        connection,
        procore_company_id,
        company_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Equipment
  Updating a piece of Equipment

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): Id of the Equipment
  - `managed_equipment_body` (ManagedEquipmentBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.ManagedEquipmentBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_id_patch(
        connection,
        procore_company_id,
        company_id,
        id,
        managed_equipment_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, managed_equipment_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Retrieve Equipment
  Restore a piece of Equipment

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): Id of the Equipment
  - `managed_equipment_body` (ManagedEquipmentBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_id_restore_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.ManagedEquipmentBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_id_restore_patch(
        connection,
        procore_company_id,
        company_id,
        id,
        managed_equipment_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/#{id}/restore")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, managed_equipment_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Deleted Equipment Serial Number
  Update a serial number for a deleted piece of Equipment

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `id` (integer()): Id of the Equipment
  - `managed_equipment_serial_number_update_body` (ManagedEquipmentSerialNumberUpdateBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_id_update_deleted_equipment_serial_number_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.ManagedEquipmentSerialNumberUpdateBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_id_update_deleted_equipment_serial_number_patch(
        connection,
        procore_company_id,
        company_id,
        id,
        managed_equipment_serial_number_update_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/companies/#{company_id}/managed_equipment/#{id}/update_deleted_equipment_serial_number"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, managed_equipment_serial_number_update_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Equipment
  Create a new Equipment associated with the specified company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `managed_equipment_body` (ManagedEquipmentBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.ManagedEquipmentBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_post(
        connection,
        procore_company_id,
        company_id,
        managed_equipment_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, managed_equipment_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Search all equipment
  Return a list of all searched equipment with details for a specified company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[managed_equipment_id]"` (integer()): Return item(s) with the specified Managed Equipment ID.
    - `:"filters[managed_equipment_category_id]"` (integer()): Return item(s) with the specified Managed Equipment Category ID.
    - `:"filters[managed_equipment_type_id]"` (integer()): Return item(s) with the specified Managed Equipment Type ID.
    - `:"filters[managed_equipment_make_id]"` (integer()): Return item(s) with the specified Managed Equipment Make ID.
    - `:"filters[managed_equipment_model_id]"` (integer()): Return item(s) with the specified Managed Equipment Model ID.
    - `:"filters[company_visible]"` (boolean()): If true, return item(s) with 'company visible' status.
    - `:"filters[current_project_id]"` (integer()): Return item(s) with the specified current project ID.
    - `:"filters[year]"` (integer()): Return item(s) with the specified year.
    - `:"filters[status]"` ([String.t]): Returns item(s) matching the specified status value.
    - `:"filters[last_service_date]"` (String.t): Return item(s) with a last service date within the specified ISO 8601 datetime range.
    - `:"filters[next_service_date]"` (String.t): Return item(s) with a next service date within the specified ISO 8601 datetime range.
    - `:search_keyword` (String.t): Search keyword to search Project Managed Equipment.

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_query_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_query_post(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[updated_at]" => :query,
      :"filters[managed_equipment_id]" => :query,
      :"filters[managed_equipment_category_id]" => :query,
      :"filters[managed_equipment_type_id]" => :query,
      :"filters[managed_equipment_make_id]" => :query,
      :"filters[managed_equipment_model_id]" => :query,
      :"filters[company_visible]" => :query,
      :"filters[current_project_id]" => :query,
      :"filters[year]" => :query,
      :"filters[status]" => :query,
      :"filters[last_service_date]" => :query,
      :"filters[next_service_date]" => :query,
      :search_keyword => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/query")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdManagedEquipmentGet200ResponseInner},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Setup Managed Equipment Taxonomy
  Setup Managed Equipment Taxonomy with the specified company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `managed_equipment_dependent_body` (ManagedEquipmentDependentBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_setup_managed_equipment_dependents_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.ManagedEquipmentDependentBody.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_setup_managed_equipment_dependents_post(
        connection,
        procore_company_id,
        company_id,
        managed_equipment_dependent_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/companies/#{company_id}/managed_equipment/setup_managed_equipment_dependents"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, managed_equipment_dependent_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List all Company Managed Equipment User Permissions
  Return a list of allCompany Managed Equipment User Permissions for a specified company.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%CompanyManagedEquipmentUserPermission{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_user_permissions_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.CompanyManagedEquipmentUserPermission.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_user_permissions_get(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/user_permissions")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.CompanyManagedEquipmentUserPermission},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update User Permission
  Updating a Company Managed Equipment User Permission

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `managed_equipment_permission_update_body` (ManagedEquipmentPermissionUpdateBody): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.CompanyManagedEquipmentUserPermission.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_managed_equipment_user_permissions_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.ManagedEquipmentPermissionUpdateBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.CompanyManagedEquipmentUserPermission.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_managed_equipment_user_permissions_patch(
        connection,
        procore_company_id,
        company_id,
        managed_equipment_permission_update_body,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/companies/#{company_id}/managed_equipment/user_permissions")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, managed_equipment_permission_update_body)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.CompanyManagedEquipmentUserPermission},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
