# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementCorrespondenceTypesCorrespondences do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementCorrespondenceTypesCorrespondences`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Update Generic Tool
  Update a Generic Tool's attributes. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool.
  - `rest_v10_companies_company_id_generic_tools_post_request` (RestV10CompaniesCompanyIdGenericToolsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_generic_tools_generic_tool_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdGenericToolsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_generic_tools_generic_tool_id_patch(
        connection,
        procore_company_id,
        company_id,
        generic_tool_id,
        rest_v10_companies_company_id_generic_tools_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/companies/#{company_id}/generic_tools/#{generic_tool_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_companies_company_id_generic_tools_post_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdPatch200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Statuses for a Generic Tool
  Returns a list of all Statuses for a Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_get(
        connection,
        procore_company_id,
        company_id,
        generic_tool_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/generic_tools/#{generic_tool_id}/statuses")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Generic Tool Status
  Delete the specified Generic Tool Status.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `id` (integer()): Unique identifier for the Status
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_id_delete(
        connection,
        procore_company_id,
        company_id,
        generic_tool_id,
        id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/companies/#{company_id}/generic_tools/#{generic_tool_id}/statuses/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Generic Tool Status
  Create a new Generic Tool Status for the specified Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request` (RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post(
        connection,
        procore_company_id,
        company_id,
        generic_tool_id,
        rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/companies/#{company_id}/generic_tools/#{generic_tool_id}/statuses")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_companies_company_id_generic_tools_generic_tool_id_statuses_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201,
       Procore.Model.RestV10CompaniesCompanyIdGenericToolsGenericToolIdStatusesGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Generic Tools
  Returns a list of all Generic Tools in the specified Company. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[project_id]"` (integer()): Return item(s) with the Project ID.

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_generic_tools_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_generic_tools_get(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[project_id]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/generic_tools")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Generic Tool
  Create a new Generic Tool in the specified Company.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `rest_v10_companies_company_id_generic_tools_post_request` (RestV10CompaniesCompanyIdGenericToolsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_generic_tools_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10CompaniesCompanyIdGenericToolsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_generic_tools_post(
        connection,
        procore_company_id,
        company_id,
        rest_v10_companies_company_id_generic_tools_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/companies/#{company_id}/generic_tools")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_companies_company_id_generic_tools_post_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV10CompaniesCompanyIdGenericToolsGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Correspondence Type Items
  Returns a list of all Correspondence Type Items in the specified Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[login_information_id]"` ([integer()]): Array of Login Information IDs. Returns item(s) with the specified Login Information ID.
    - `:"filters[status]"` ([String.t]): Returns item(s) matching the specified status value.
    - `:"filters[overdue]"` (boolean()): If true, returns item(s) that are overdue.
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:"filters[recycle_bin]"` (boolean()): If true, returns item(s) that have been deleted.
    - `:"filters[generic_tool_id]"` ([integer()]): Return item(s) within the specified Generic Tool ID(s)
    - `:"filters[received_from_id]"` (integer()): Received From ID
    - `:"filters[created_by_id]"` ([integer()]): Returns item(s) created by the specified User IDs.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[closed_at]"` (Date.t): Returns item(s) closed within the specified ISO 8601 datetime range.
    - `:"filters[issued_at]"` (String.t): Returns item(s) issued within the specified ISO 8601 datetime range.
    - `:"filters[vendor_id]"` (integer()): Return item(s) with the specified Vendor ID.
    - `:"filters[private]"` (boolean()): If true, returns only item(s) with a `private` status.
    - `:"filters[location_id]"` (integer()): Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)
    - `:sort` (String.t): Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
    - `:group` (String.t): Controls if the Items are returned sorted by the sort attribute then the Generic Tool's Title or just the sort attribute. Defaults to 'generic_tool_title'.
    - `:view` (String.t): Defines the type of view returned. Must be one of 'extended', 'compact', 'ids_only', or 'flatten_v0'.

  ### Returns

  - `{:ok, [%GenericToolItem1{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_correspondence_type_items_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.GenericToolItem1.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_correspondence_type_items_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[id]" => :query,
      :"filters[login_information_id]" => :query,
      :"filters[status]" => :query,
      :"filters[overdue]" => :query,
      :"filters[query]" => :query,
      :"filters[recycle_bin]" => :query,
      :"filters[generic_tool_id]" => :query,
      :"filters[received_from_id]" => :query,
      :"filters[created_by_id]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[closed_at]" => :query,
      :"filters[issued_at]" => :query,
      :"filters[vendor_id]" => :query,
      :"filters[private]" => :query,
      :"filters[location_id]" => :query,
      :sort => :query,
      :group => :query,
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/correspondence_type_items")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.GenericToolItem1},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Batch Update Correspondence Type Items
  Update all specified Correspondence Type Items.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_correspondence_type_items_patch_request` (RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest): 
  - `opts` (keyword): Optional parameters
    - `:completion_mode` (String.t): Defines whether to update items that can be, or none if at least one item can not be updated. Defaults to 'all_or_nothing'.

  ### Returns

  - `{:ok, [%List{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_correspondence_type_items_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypeItemsPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               [
                 Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypeItemsPatch200ResponseInnerInner.t()
               ]
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_correspondence_type_items_patch(
        connection,
        procore_company_id,
        project_id,
        rest_v10_projects_project_id_correspondence_type_items_patch_request,
        opts \\ []
      ) do
    optional_params = %{
      :completion_mode => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/correspondence_type_items")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_correspondence_type_items_patch_request
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypeItemsPatch200ResponseInnerInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Correspondence Type Defaults
  Returns a list of all Correspondence Types Defaults for the specificied Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:"filters[generic_tool_id]"` ([integer()]): Return item(s) within the specified Generic Tool ID(s)
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_correspondence_types_defaults_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           [
             Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner.t()
           ]}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_correspondence_types_defaults_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :"filters[generic_tool_id]" => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/correspondence_types/defaults")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypesDefaultsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Correspondence Type Permissions
  Returns a list of all Correspondence Types Permissions for the requesting User in the specificied Project.  Granular Permissions that are granted via UAL and are force-checked are not included in the list. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_correspondence_types_permissions_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_correspondence_types_permissions_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/correspondence_types/permissions")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypesPermissionsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Correspondence Type Users
  Returns a list of all Correspondence Types Users Availability for the specificied Project.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_correspondence_types_users_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_correspondence_types_users_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/correspondence_types/users")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Custom Tool Users
  Returns a list of all Custom Tools Users Availability for the specificied Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_custom_tools_users_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_custom_tools_users_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/custom_tools/users")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdCorrespondenceTypesUsersGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Users with access to a generic tool
  Returns a list of all Users in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[query]"` (String.t): Return item(s) containing search query

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_read_users_get(
        connection,
        procore_company_id,
        generic_tool_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[query]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/available_read_users"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List statuses available for a generic tool
  Returns a list of all available statuses in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_available_statuses_get(
        connection,
        procore_company_id,
        generic_tool_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/available_statuses"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsAvailableStatusesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Change History for a Generic Tool Item
  Returns a list of all change histories for a generic tool item in the specified project and generic tool. For more information on Generic Tool and Correspondence Tool endpoints, see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the generic tool.
  - `generic_tool_item_id` (integer()): Unique identifier for the generic tool item.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_change_histories_get(
        connection,
        procore_company_id,
        generic_tool_id,
        generic_tool_item_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}/change_histories"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10ProjectsProjectIdTimeAndMaterialEntriesIdChangeHistoryGet304Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Generic Tool Item
  Delete a Generic Tool Item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_item_id` (integer()): Unique identifier for the Generic Tool Item
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): If supplied customize the response format

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_delete(
        connection,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Responses for a Generic Tool Item
  Returns a list of all responses for a generic tool item in the specified project and generic tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the generic tool.
  - `generic_tool_item_id` (integer()): Unique identifier for the generic tool item.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%GenericToolItemResponse{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.GenericToolItemResponse.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_get(
        connection,
        procore_company_id,
        generic_tool_id,
        generic_tool_item_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}/generic_tool_item_responses"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.GenericToolItemResponse},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Generic Tool Item Response
  Update attributes on a generic tool item response.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the generic tool
  - `generic_tool_item_id` (integer()): Unique identifier for the generic tool item
  - `id` (integer()): Unique identifier for the response
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request` (RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.GenericToolItemResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.GenericToolItemResponse.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch(
        connection,
        procore_company_id,
        generic_tool_id,
        generic_tool_item_id,
        id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}/generic_tool_item_responses/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_id_patch_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.GenericToolItemResponse},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create generic tool item response.
  Create a new response for a generic tool item in the specified project and generic tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the generic tool.
  - `generic_tool_item_id` (integer()): Unique identifier for the generic tool item.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request` (RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.GenericToolItemResponse.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdGenericToolItemResponsesPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.GenericToolItemResponse.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post(
        connection,
        procore_company_id,
        generic_tool_id,
        generic_tool_item_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}/generic_tool_item_responses"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_generic_tool_item_responses_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.GenericToolItemResponse},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Generic Tool Item
  Get the details of a single Generic Tool Item.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_item_id` (integer()): Unique identifier for the Generic Tool Item
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): If supplied customize the response format

  ### Returns

  - `{:ok, Procore.Model.GenericToolItem1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.GenericToolItem1.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_get(
        connection,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.GenericToolItem1},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Generic Tool Item
  Update a Generic Tool Item's attributes. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_item_id` (integer()): Unique identifier for the Generic Tool Item
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request` (RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest): 
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): If supplied customize the response format

  ### Returns

  - `{:ok, Procore.Model.GenericToolItem1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.GenericToolItem1.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_patch(
        connection,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.GenericToolItem1},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Send a response from a Generic Tool Item and then update the item status
  Send a response from a generic tool item and then update that item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_item_id` (integer()): Unique identifier for the Generic Tool Item
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request` (RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.GenericToolItem1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsGenericToolItemIdUpdateAndSendResponsePostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.GenericToolItem1.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post(
        connection,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}/update_and_send_response"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_update_and_send_response_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.GenericToolItem1},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Users with access to a Generic Tool Item
  Returns a list of all Users That have access to a private generic tool item. If the item is public it will return an empty array as anyone with access to the tool can access the item. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_item_id` (integer()): Unique identifier for the Generic Tool Item
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_generic_tool_item_id_users_with_permission_get(
        connection,
        procore_company_id,
        generic_tool_item_id,
        generic_tool_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items/#{generic_tool_item_id}/users_with_permission"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdRfisDefaultDistributionGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List generic tool items
  Returns a list of all Generic Tool Items in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[login_information_id]"` ([integer()]): Array of Login Information IDs. Returns item(s) with the specified Login Information ID.
    - `:"filters[status]"` ([String.t]): Returns item(s) matching the specified status value.
    - `:"filters[overdue]"` (boolean()): If true, returns item(s) that are overdue.
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:"filters[recycle_bin]"` (boolean()): If true, returns item(s) that have been deleted.
    - `:"filters[received_from_id]"` (integer()): Received From ID
    - `:"filters[created_by_id]"` ([integer()]): Returns item(s) created by the specified User IDs.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[closed_at]"` (Date.t): Returns item(s) closed within the specified ISO 8601 datetime range.
    - `:"filters[issued_at]"` (String.t): Returns item(s) issued within the specified ISO 8601 datetime range.
    - `:"filters[vendor_id]"` (integer()): Return item(s) with the specified Vendor ID.
    - `:sort` (String.t): Field to sort by. If the field is passed with a - (EX: -updated_at) it is sorted in reverse order
    - `:view` (String.t): If supplied customize the response format

  ### Returns

  - `{:ok, [%GenericToolItem1{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.GenericToolItem1.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_get(
        connection,
        procore_company_id,
        generic_tool_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[id]" => :query,
      :"filters[login_information_id]" => :query,
      :"filters[status]" => :query,
      :"filters[overdue]" => :query,
      :"filters[query]" => :query,
      :"filters[recycle_bin]" => :query,
      :"filters[received_from_id]" => :query,
      :"filters[created_by_id]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[closed_at]" => :query,
      :"filters[issued_at]" => :query,
      :"filters[vendor_id]" => :query,
      :sort => :query,
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.GenericToolItem1},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Batch Update Generic Tool Items
  Update all selected Generic Tool Items. For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request` (RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest): 
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): If supplied customize the response format
    - `:completion_mode` (String.t): Whether to update what can be or nothing if one can not be updated. Defaults to \"all_or_nothing\"

  ### Returns

  - `{:ok, [%List{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               [
                 Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatch200ResponseInnerInner.t()
               ]
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch(
        connection,
        procore_company_id,
        generic_tool_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query,
      :completion_mode => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_patch_request
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPatch200ResponseInnerInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Generic Tool Item
  Create a new Generic Tool Item in the specified Project and Generic Tool.  For more information on Generic Tool and Correspondence Tool endpoints,  see [Working with the Correspondence Tool](/documentation/tutorial-correspondence).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `generic_tool_id` (integer()): Unique identifier for the Generic Tool
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request` (RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest): 
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): If supplied customize the response format

  ### Returns

  - `{:ok, Procore.Model.GenericToolItem1.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdGenericToolsGenericToolIdGenericToolItemsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.GenericToolItem1.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post(
        connection,
        procore_company_id,
        generic_tool_id,
        project_id,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:post)
      |> url(
        "/rest/v1.0/projects/#{project_id}/generic_tools/#{generic_tool_id}/generic_tool_items"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_generic_tools_generic_tool_id_generic_tool_items_post_request
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.GenericToolItem1},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
