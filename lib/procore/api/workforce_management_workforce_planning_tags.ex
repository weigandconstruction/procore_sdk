# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.WorkforceManagementWorkforcePlanningTags do
  @moduledoc """
  API calls for all endpoints tagged `WorkforceManagementWorkforcePlanningTags`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Get All Workforce Planning Tag for a Group
  Gets all of the Workforce Planning Tags belonging to a Group

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_tags_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_tags_get(
        connection,
        procore_company_id,
        company_id,
        group_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups/#{group_id}/tags")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Get All Workforce Planning Tag for a Company
  Gets all of the Workforce Planning Tags belonging to a Company

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_tags_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_tags_get(
        connection,
        procore_company_id,
        company_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/tags")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Create Company Tag
  Creates a Workforce Planning Tag for the given company

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdTagsPostRequest): 

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdTagsPost200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_tags_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdTagsPost200ResponseInner.t()
             ]}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_tags_post(
        connection,
        procore_company_id,
        company_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/tags")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdTagsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Delete a Workforce Planning Tag
  Deletes a Workforce Planning Tag

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `tag_id` (integer()): Unique identifier for the tag.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdTagsPost200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdTagsPost200ResponseInner.t()
             ]}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_delete(
        connection,
        procore_company_id,
        company_id,
        tag_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/tags/#{tag_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdTagsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Get a Single Workforce Planning Tag
  Gets a single Workforce Planning Tag

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `tag_id` (integer()): Unique identifier for the tag.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_get(
        connection,
        procore_company_id,
        company_id,
        tag_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/tags/#{tag_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Remove Tag Availablility to Group
  Removes a Workforce Planning Tag from being available to a given group or groups

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `tag_id` (integer()): Unique identifier for the tag.
  - `group_id` (integer()): Unique identifier for the group
  - `group_ids` ([String.t]): Array of UUIDs for which Groups this Tag should be available to or be removed from depending on context. For adding availability, if globally_accessible is true, this can be an empty array.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdTagsTagIdGroupsPost200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_groups_group_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          list(String.t()),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdTagsTagIdGroupsPost200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_groups_group_id_delete(
        connection,
        procore_company_id,
        company_id,
        tag_id,
        group_id,
        group_ids,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/tags/#{tag_id}/groups/#{group_id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :group_ids, group_ids)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdTagsTagIdGroupsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Make Tag from being Available to Group
  Makes a Workforce Planning Tag from being Available to a given Group

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `tag_id` (integer()): Unique identifier for the tag.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdTagsTagIdGroupsPostRequest): 

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdTagsTagIdGroupsPost200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_groups_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdTagsTagIdGroupsPost200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_groups_post(
        connection,
        procore_company_id,
        company_id,
        tag_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/tags/#{tag_id}/groups")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdTagsTagIdGroupsPost200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end

  @doc """
  Update Company Tag
  Updates a Workforce Planning Tag for the given company

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `tag_id` (integer()): Unique identifier for the tag.
  - `opts` (keyword): Optional parameters
    - `:body` (RestV10WorkforcePlanningV2CompaniesCompanyIdTagsTagIdPostRequest): 

  ### Returns

  - `{:ok, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_tags_tag_id_post(
        connection,
        procore_company_id,
        company_id,
        tag_id,
        opts \\ []
      ) do
    optional_params = %{
      :body => :body
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/workforce_planning/v2/companies/#{company_id}/tags/#{tag_id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdTagsGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response},
      {403, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet403Response},
      {404, Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsGet404Response}
    ])
  end
end
