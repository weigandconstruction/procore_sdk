# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.QualitySafetyInspectionsChecklists do
  @moduledoc """
  API calls for all endpoints tagged `QualitySafetyInspectionsChecklists`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Checklists
  Lists Checklist (Inspections) in a specified Project grouped by a specified attribute. By default the Checklists are grouped by template. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:"filters[view]"` (String.t): If 'recycle', return deleted Checklists.
    - `:"filters[inspection_type_id]"` ([integer()]): Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
    - `:"filters[point_of_contact_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
    - `:"filters[inspector_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are inspectors.
    - `:"filters[list_template_id]"` ([integer()]): Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
    - `:"filters[location_id]"` (integer()): Filters by specific location (Note: Use *either* this or location_id_with_sublocations, but not both)
    - `:"filters[spec_section_id]"` ([integer()]): Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
    - `:"filters[responsible_contractor_id]"` ([integer()]): Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
    - `:"filters[status]"` ([String.t]): Returns item(s) matching the specified status value.
    - `:"filters[trade_id]"` (integer()): Trade ID
    - `:"filters[search]"` (String.t): Returns item(s) matching the specified search query string.
    - `:"filters[due_at]"` (DateTime.t): Return item(s) due within the specified date range.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset

  ### Returns

  - `{:ok, [%RestV10ChecklistListsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_get(Tesla.Env.client(), integer(), integer(), keyword()) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10ChecklistListsGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_get(connection, procore_company_id, project_id, opts \\ []) do
    optional_params = %{
      :"filters[view]" => :query,
      :"filters[inspection_type_id]" => :query,
      :"filters[point_of_contact_id]" => :query,
      :"filters[inspector_id]" => :query,
      :"filters[list_template_id]" => :query,
      :"filters[location_id]" => :query,
      :"filters[spec_section_id]" => :query,
      :"filters[responsible_contractor_id]" => :query,
      :"filters[status]" => :query,
      :"filters[trade_id]" => :query,
      :"filters[search]" => :query,
      :"filters[due_at]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/checklist/lists")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ChecklistListsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Checklist
  Deletes Inspection Checklist in a specified Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_id_delete(
        connection,
        procore_company_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Checklist
  Retrieves Inspection Checklist in a specified Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Checklist3.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist3.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_id_get(connection, procore_company_id, id, project_id, _opts \\ []) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Checklist3},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Checklist
  Updates Inspection Checklist in a specified Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `checklist_body1` (ChecklistBody1): 
  - `opts` (keyword): Optional parameters
    - `:run_configurable_validations` (boolean()): If true, validations are run for the corresponding Configurable Field Set.

  ### Returns

  - `{:ok, Procore.Model.Checklist3.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.ChecklistBody1.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist3.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_id_patch(
        connection,
        procore_company_id,
        id,
        checklist_body1,
        opts \\ []
      ) do
    optional_params = %{
      :run_configurable_validations => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, checklist_body1)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Checklist3},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Checklist
  Creates Inspection Checklist in a specified Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `checklist_body` (ChecklistBody): 
  - `opts` (keyword): Optional parameters
    - `:run_configurable_validations` (boolean()): If true, validations are run for the corresponding Configurable Field Set.

  ### Returns

  - `{:ok, Procore.Model.Checklist3.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_checklist_lists_post(
          Tesla.Env.client(),
          integer(),
          Procore.Model.ChecklistBody.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist3.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_checklist_lists_post(connection, procore_company_id, checklist_body, opts \\ []) do
    optional_params = %{
      :run_configurable_validations => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/checklist/lists")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, checklist_body)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.Checklist3},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Checklists (Inspections)
  Lists Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[inspection_date]"` (Date.t): Return item(s) with inspection date within the specified ISO 8601 date range.
    - `:"filters[inspection_type_id]"` ([integer()]): Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
    - `:"filters[inspector_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are inspectors.
    - `:"filters[template_id]"` ([String.t]): Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.
    - `:"filters[location_id]"` ([integer()]): Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
    - `:"filters[managed_equipment_id]"` (integer()): Return item(s) with the specified Managed Equipment ID.
    - `:"filters[point_of_contact_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
    - `:"filters[spec_section_id]"` ([integer()]): Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
    - `:"filters[responsible_contractor_id]"` ([integer()]): Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
    - `:"filters[closed_by_id]"` ([integer()]): Array of User IDs. Return item(s) closed by the specified User ID.
    - `:"filters[status]"` (integer()): Return item(s) with the specified statuses
    - `:"filters[trade_id]"` (integer()): Trade ID
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:"filters[due_at]"` (DateTime.t): Return item(s) due within the specified date range.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[closed_at]"` (Date.t): Returns item(s) closed within the specified ISO 8601 datetime range.
    - `:sort` (String.t): 

  ### Returns

  - `{:ok, [%Checklist5{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_checklist_lists_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.Checklist5.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_checklist_lists_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[id]" => :query,
      :"filters[inspection_date]" => :query,
      :"filters[inspection_type_id]" => :query,
      :"filters[inspector_id]" => :query,
      :"filters[template_id]" => :query,
      :"filters[location_id]" => :query,
      :"filters[managed_equipment_id]" => :query,
      :"filters[point_of_contact_id]" => :query,
      :"filters[spec_section_id]" => :query,
      :"filters[responsible_contractor_id]" => :query,
      :"filters[closed_by_id]" => :query,
      :"filters[status]" => :query,
      :"filters[trade_id]" => :query,
      :"filters[query]" => :query,
      :"filters[due_at]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[closed_at]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/checklist/lists")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Checklist5},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Grouped Checklists (Inspections)
  Lists Grouped Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[inspection_date]"` (Date.t): Return item(s) with inspection date within the specified ISO 8601 date range.
    - `:"filters[inspection_type_id]"` ([integer()]): Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
    - `:"filters[inspector_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are inspectors.
    - `:"filters[list_template_id]"` ([integer()]): Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
    - `:"filters[location_id]"` ([integer()]): Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
    - `:"filters[managed_equipment_id]"` (integer()): Return item(s) with the specified Managed Equipment ID.
    - `:"filters[point_of_contact_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
    - `:"filters[spec_section_id]"` ([integer()]): Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
    - `:"filters[responsible_contractor_id]"` ([integer()]): Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
    - `:"filters[closed_by_id]"` ([integer()]): Array of User IDs. Return item(s) closed by the specified User ID.
    - `:"filters[status]"` (integer()): Return item(s) with the specified statuses
    - `:"filters[trade_id]"` (integer()): Trade ID
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:"filters[due_at]"` (DateTime.t): Return item(s) due within the specified date range.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[closed_at]"` (Date.t): Returns item(s) closed within the specified ISO 8601 datetime range.
    - `:sort` (String.t): 
    - `:group_by` (String.t): 

  ### Returns

  - `{:ok, [%ChecklistListGroup{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_checklist_lists_grouped_index_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.ChecklistListGroup.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_checklist_lists_grouped_index_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[id]" => :query,
      :"filters[inspection_date]" => :query,
      :"filters[inspection_type_id]" => :query,
      :"filters[inspector_id]" => :query,
      :"filters[list_template_id]" => :query,
      :"filters[location_id]" => :query,
      :"filters[managed_equipment_id]" => :query,
      :"filters[point_of_contact_id]" => :query,
      :"filters[spec_section_id]" => :query,
      :"filters[responsible_contractor_id]" => :query,
      :"filters[closed_by_id]" => :query,
      :"filters[status]" => :query,
      :"filters[trade_id]" => :query,
      :"filters[query]" => :query,
      :"filters[due_at]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[closed_at]" => :query,
      :sort => :query,
      :group_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/checklist/lists/grouped_index")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ChecklistListGroup},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Checklist (Inspection)
  Deletes specified Checklist (Inspection)

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_checklist_lists_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_checklist_lists_id_delete(
        connection,
        procore_company_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/projects/#{project_id}/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Checklist (Inspection)
  Returns the specified Checklist (Inspection)

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Checklist5.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_checklist_lists_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist5.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_checklist_lists_id_get(
        connection,
        procore_company_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Checklist5},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Checklist (Inspection)
  Updates a specified Checklist (Inspection)

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_checklist_lists_id_patch_request` (RestV10ProjectsProjectIdChecklistListsIdPatchRequest): 
  - `opts` (keyword): Optional parameters
    - `:run_configurable_validations` (boolean()): If true, validations are run for the corresponding Configurable Field Set.

  ### Returns

  - `{:ok, Procore.Model.Checklist5.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_checklist_lists_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdChecklistListsIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist5.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_checklist_lists_id_patch(
        connection,
        procore_company_id,
        id,
        project_id,
        rest_v10_projects_project_id_checklist_lists_id_patch_request,
        opts \\ []
      ) do
    optional_params = %{
      :run_configurable_validations => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_projects_project_id_checklist_lists_id_patch_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Checklist5},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Send Checklist (Inspection) Email
  Send an email for a Checklist (Inspection) in a Project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `body111` (Body111): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_checklist_lists_id_send_email_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.Body111.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_checklist_lists_id_send_email_post(
        connection,
        procore_company_id,
        id,
        project_id,
        body111,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/projects/#{project_id}/checklist/lists/#{id}/send_email")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body111)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Checklist (Inspection)
  Creates an instance of Inspection in a given Project

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_checklist_lists_post_request` (RestV10ProjectsProjectIdChecklistListsPostRequest): 
  - `opts` (keyword): Optional parameters
    - `:run_configurable_validations` (boolean()): If true, validations are run for the corresponding Configurable Field Set.

  ### Returns

  - `{:ok, Procore.Model.Checklist5.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_checklist_lists_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdChecklistListsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist5.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_checklist_lists_post(
        connection,
        procore_company_id,
        project_id,
        rest_v10_projects_project_id_checklist_lists_post_request,
        opts \\ []
      ) do
    optional_params = %{
      :run_configurable_validations => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/projects/#{project_id}/checklist/lists")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_projects_project_id_checklist_lists_post_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.Checklist5},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Recycled Checklists (Inspections)
  Lists Recycled Checklist (Inspections) in a specified Project. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[inspection_date]"` (Date.t): Return item(s) with inspection date within the specified ISO 8601 date range.
    - `:"filters[inspection_type_id]"` ([integer()]): Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
    - `:"filters[inspector_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are inspectors.
    - `:"filters[template_id]"` ([String.t]): Array of Checklist Template IDs. Return item(s) associated to the specified Checklist Template IDs.
    - `:"filters[location_id]"` ([integer()]): Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
    - `:"filters[managed_equipment_id]"` (integer()): Return item(s) with the specified Managed Equipment ID.
    - `:"filters[point_of_contact_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
    - `:"filters[spec_section_id]"` ([integer()]): Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
    - `:"filters[responsible_contractor_id]"` ([integer()]): Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
    - `:"filters[closed_by_id]"` ([integer()]): Array of User IDs. Return item(s) closed by the specified User ID.
    - `:"filters[status]"` (integer()): Return item(s) with the specified statuses
    - `:"filters[trade_id]"` (integer()): Trade ID
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:"filters[due_at]"` (DateTime.t): Return item(s) due within the specified date range.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[closed_at]"` (Date.t): Returns item(s) closed within the specified ISO 8601 datetime range.
    - `:sort` (String.t): 

  ### Returns

  - `{:ok, [%Checklist5{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_recycle_bin_checklist_lists_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.Checklist5.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_recycle_bin_checklist_lists_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[id]" => :query,
      :"filters[inspection_date]" => :query,
      :"filters[inspection_type_id]" => :query,
      :"filters[inspector_id]" => :query,
      :"filters[template_id]" => :query,
      :"filters[location_id]" => :query,
      :"filters[managed_equipment_id]" => :query,
      :"filters[point_of_contact_id]" => :query,
      :"filters[spec_section_id]" => :query,
      :"filters[responsible_contractor_id]" => :query,
      :"filters[closed_by_id]" => :query,
      :"filters[status]" => :query,
      :"filters[trade_id]" => :query,
      :"filters[query]" => :query,
      :"filters[due_at]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[closed_at]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/recycle_bin/checklist/lists")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Checklist5},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Grouped Recycled Checklists (Inspections)
  Lists Recycled Checklist (Inspections) in a specified Project grouped by a specified attribute. By default the Checklists are grouped by template. See [Filtering on List Actions](https://developers.procore.com/documentation/filtering-on-list-actions) for information on using the filtering capabilities provided by this endpoint.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[id]"` ([integer()]): Return item(s) with the specified IDs.
    - `:"filters[inspection_date]"` (Date.t): Return item(s) with inspection date within the specified ISO 8601 date range.
    - `:"filters[inspection_type_id]"` ([integer()]): Array of Inspection Type IDs. Return item(s) associated with the specified Inspection Type IDs.
    - `:"filters[inspector_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are inspectors.
    - `:"filters[list_template_id]"` ([integer()]): Array of Checklist Template IDs. Return item(s) associated with the specified Checklist Template IDs.
    - `:"filters[location_id]"` ([integer()]): Location ID. Returns item(s) with the specified Location ID or a range of Location IDs.
    - `:"filters[managed_equipment_id]"` (integer()): Return item(s) with the specified Managed Equipment ID.
    - `:"filters[point_of_contact_id]"` ([integer()]): Array of User IDs. Return item(s) where the specified User IDs are the point of contact.
    - `:"filters[spec_section_id]"` ([integer()]): Array of Specification Section IDs. Return item(s) associated to the specified Specification Section IDs.
    - `:"filters[responsible_contractor_id]"` ([integer()]): Array of Vendor IDs. Return item(s) where the specified Vendor IDs are the responsible contractor.
    - `:"filters[closed_by_id]"` ([integer()]): Array of User IDs. Return item(s) closed by the specified User ID.
    - `:"filters[status]"` (integer()): Return item(s) with the specified statuses
    - `:"filters[trade_id]"` (integer()): Trade ID
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:"filters[due_at]"` (DateTime.t): Return item(s) due within the specified date range.
    - `:"filters[created_at]"` (Date.t): Return item(s) created within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[updated_at]"` (Date.t): Return item(s) last updated within the specified ISO 8601 datetime range. Formats: `YYYY-MM-DD`...`YYYY-MM-DD` - Date `YYYY-MM-DDTHH:MM:SSZ`...`YYYY-MM-DDTHH:MM:SSZ` - DateTime with UTC Offset `YYYY-MM-DDTHH:MM:SS+XX:00`...`YYYY-MM-DDTHH:MM:SS+XX:00` - Datetime with Custom Offset
    - `:"filters[closed_at]"` (Date.t): Returns item(s) closed within the specified ISO 8601 datetime range.
    - `:sort` (String.t): 
    - `:group_by` (String.t): 

  ### Returns

  - `{:ok, [%ChecklistListGroup{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.ChecklistListGroup.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_recycle_bin_checklist_lists_grouped_index_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[id]" => :query,
      :"filters[inspection_date]" => :query,
      :"filters[inspection_type_id]" => :query,
      :"filters[inspector_id]" => :query,
      :"filters[list_template_id]" => :query,
      :"filters[location_id]" => :query,
      :"filters[managed_equipment_id]" => :query,
      :"filters[point_of_contact_id]" => :query,
      :"filters[spec_section_id]" => :query,
      :"filters[responsible_contractor_id]" => :query,
      :"filters[closed_by_id]" => :query,
      :"filters[status]" => :query,
      :"filters[trade_id]" => :query,
      :"filters[query]" => :query,
      :"filters[due_at]" => :query,
      :"filters[created_at]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[closed_at]" => :query,
      :sort => :query,
      :group_by => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/recycle_bin/checklist/lists/grouped_index")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.ChecklistListGroup},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Recycled Checklist (Inspection)
  Returns the specified Recycled Checklist (Inspection)

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.Checklist5.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist5.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_recycle_bin_checklist_lists_id_get(
        connection,
        procore_company_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/recycle_bin/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Checklist5},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Restore Deleted Checklist (Inspection)
  Restores a specified deleted Checklist (Inspection)

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_recycle_bin_checklist_lists_id_restore_patch(
        connection,
        procore_company_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/recycle_bin/checklist/lists/#{id}/restore")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Delete Checklist (Inspection)
  Deletes specified Checklist (Inspection)

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_checklist_lists_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_checklist_lists_id_delete(
        connection,
        procore_company_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.1/projects/#{project_id}/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Checklist (Inspection)
  Updates a specified Checklist (Inspection)

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v11_projects_project_id_checklist_lists_id_patch_request` (RestV11ProjectsProjectIdChecklistListsIdPatchRequest): 
  - `opts` (keyword): Optional parameters
    - `:run_configurable_validations` (boolean()): If true, validations are run for the corresponding Configurable Field Set.

  ### Returns

  - `{:ok, Procore.Model.Checklist.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_checklist_lists_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV11ProjectsProjectIdChecklistListsIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist.t()}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_checklist_lists_id_patch(
        connection,
        procore_company_id,
        id,
        project_id,
        rest_v11_projects_project_id_checklist_lists_id_patch_request,
        opts \\ []
      ) do
    optional_params = %{
      :run_configurable_validations => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.1/projects/#{project_id}/checklist/lists/#{id}")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v11_projects_project_id_checklist_lists_id_patch_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.Checklist},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Checklist (Inspection)
  Creates an instance of Inspection in a given Project

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v11_projects_project_id_checklist_lists_post_request` (RestV11ProjectsProjectIdChecklistListsPostRequest): 
  - `opts` (keyword): Optional parameters
    - `:run_configurable_validations` (boolean()): If true, validations are run for the corresponding Configurable Field Set.

  ### Returns

  - `{:ok, Procore.Model.Checklist.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_checklist_lists_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV11ProjectsProjectIdChecklistListsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.Checklist.t()}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_checklist_lists_post(
        connection,
        procore_company_id,
        project_id,
        rest_v11_projects_project_id_checklist_lists_post_request,
        opts \\ []
      ) do
    optional_params = %{
      :run_configurable_validations => :query
    }

    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.1/projects/#{project_id}/checklist/lists")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v11_projects_project_id_checklist_lists_post_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.Checklist},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Restore Deleted Checklist (Inspection)
  Restores a specified deleted Checklist (Inspection)

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Checklist ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_recycle_bin_checklist_lists_id_restore_patch(
        connection,
        procore_company_id,
        id,
        project_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.1/projects/#{project_id}/recycle_bin/checklist/lists/#{id}/restore")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
