# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementCoordinationIssuesCoordinationIssueRecycleBin do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementCoordinationIssuesCoordinationIssueRecycleBin`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Coordination Issues in Recycle Bin
  Lists all deleted Coordination Issues in the specified project

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[assignee_company_id][]"` ([integer()]): Filter item(s) with matching assignee vendor companies.
    - `:"filters[assignee_id][]"` ([integer()]): Filter item(s) with matching assignees.
    - `:"filters[ids][]"` ([integer()]): Filter item(s) with matching ids.
    - `:"filters[location_id][]"` ([integer()]): Filter item(s) with matching locations.
    - `:"filters[include_sublocations]"` (boolean()): Use together with `filters[location_id]` 
    - `:"filters[search]"` (String.t): Filter item(s) with the matching search query. The search is performed on title and issue number.
    - `:"filters[coordination_issue_file_id][]"` ([integer()]): Filter item(s) with the exact coordination issue file.
    - `:"filters[status][]"` ([String.t]): Filter item(s) with matching status.
    - `:"filters[updated_at]"` (String.t): Filter item(s) within a specific updated at iso8601 datetime range.
    - `:"filters[due_date]"` (String.t): Filter item(s) within a specific due date iso8601 date range.
    - `:"filters[created_at]"` (String.t): Filter item(s) within a specific created at iso8601 datetime range.
    - `:sort` (String.t): Sort item(s) by an attribute. The default sort is ascending. To sort in descending order, prepend the sort value with a hyphen character '-'
    - `:view` (String.t): The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.

  ### Returns

  - `{:ok, [%RestV10CoordinationIssuesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_coordination_issues_recycle_bin_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10CoordinationIssuesGet200ResponseInner.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_coordination_issues_recycle_bin_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[assignee_company_id][]" => :query,
      :"filters[assignee_id][]" => :query,
      :"filters[ids][]" => :query,
      :"filters[location_id][]" => :query,
      :"filters[include_sublocations]" => :query,
      :"filters[search]" => :query,
      :"filters[coordination_issue_file_id][]" => :query,
      :"filters[status][]" => :query,
      :"filters[updated_at]" => :query,
      :"filters[due_date]" => :query,
      :"filters[created_at]" => :query,
      :sort => :query,
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/coordination_issues/recycle_bin")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10CoordinationIssuesGet200ResponseInner},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Coordination Issue in Recycle Bin
  Return a single Coordination Issue item in Recycle Bin.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Coordination Issue ID
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:view` (String.t): The compact view contains only ids. The normal view is a subset of the response shown below, and does not include attachments, viewpoints, linked items and updated_by The extended view contains the response shown below. The default view is normal.

  ### Returns

  - `{:ok, Procore.Model.RestV10CoordinationIssuesGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_coordination_issues_recycle_bin_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10CoordinationIssuesGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_coordination_issues_recycle_bin_id_get(
        connection,
        procore_company_id,
        id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :view => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/coordination_issues/recycle_bin/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10CoordinationIssuesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Restore Coordination Issue from Recycle Bin
  Restore Coordination Issue from Recycle Bin

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): Coordination Issue ID
  - `rest_v10_coordination_issues_recycle_bin_id_patch_request` (RestV10CoordinationIssuesRecycleBinIdPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_coordination_issues_recycle_bin_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10CoordinationIssuesRecycleBinIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_coordination_issues_recycle_bin_id_patch(
        connection,
        procore_company_id,
        id,
        rest_v10_coordination_issues_recycle_bin_id_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/coordination_issues/recycle_bin/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_coordination_issues_recycle_bin_id_patch_request)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
