# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementDailyLogDailyLogHeaders do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementDailyLogDailyLogHeaders`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Get the Daily Log Header via date or id
  Returns the Daily Log Header for a given date or id

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): The id of the requested Daily Log Header
    - `:log_date` (Date.t): The log date for the requested Daily Log Header

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_daily_log_headers_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_daily_log_headers_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :id => :query,
      :log_date => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/daily_log_headers")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersGet200Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Get Daily Log Headers for the Project
  Returns Daily Log Headers for the Project for specified date range or all if not specified

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:start_date` (Date.t): The left boundary of requested date range
    - `:end_date` (Date.t): The right boundary of requested date range
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdDailyLogHeadersGet200Response{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_daily_log_headers_index_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, [Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersGet200Response.t()]}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_daily_log_headers_index_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :start_date => :query,
      :end_date => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/daily_log_headers/index")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersGet200Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update the state of a Daily Log Header
  Sets the completed boolean value and/or distributes the Daily Log to its distribution list

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_daily_log_headers_patch_request` (RestV10ProjectsProjectIdDailyLogHeadersPatchRequest): 
  - `opts` (keyword): Optional parameters
    - `:id` (integer()): The id of the requested Daily Log Header
    - `:log_date` (Date.t): The log date for the requested Daily Log Header
    - `:app_name` (String.t): The name of app which issues this request. If app name is 'web' and request completes day then web filters of user which completes day are applied to pdf which is sent to distribution users.

  ### Returns

  - `{:ok, Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_daily_log_headers_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_daily_log_headers_patch(
        connection,
        procore_company_id,
        project_id,
        rest_v10_projects_project_id_daily_log_headers_patch_request,
        opts \\ []
      ) do
    optional_params = %{
      :id => :query,
      :log_date => :query,
      :app_name => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/daily_log_headers")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, rest_v10_projects_project_id_daily_log_headers_patch_request)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10ProjectsProjectIdDailyLogHeadersGet200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
