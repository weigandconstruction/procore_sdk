# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementCoordinationIssuesCoordinationIssueProcoreItemAssociations do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementCoordinationIssuesCoordinationIssueProcoreItemAssociations`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Delete Procore Item Association
  Delete the association between Coordination Issue and Procore item

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `coordination_issue_id` (integer()): Coordination Issue ID
  - `id` (integer()): Procore Item Association ID
  - `project_id` (integer()): Unique identifier for the project.
  - `item_type` (String.t): Type of Procore item
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_coordination_issues_coordination_issue_id_procore_item_associations_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          integer(),
          String.t(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_coordination_issues_coordination_issue_id_procore_item_associations_id_delete(
        connection,
        procore_company_id,
        coordination_issue_id,
        id,
        project_id,
        item_type,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:delete)
      |> url(
        "/rest/v1.0/coordination_issues/#{coordination_issue_id}/procore_item_associations/#{id}"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_param(:query, :item_type, item_type)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Procore Item Association
  CoordinationIssue can be associated with other procore items. This API endpoint creates that association. The extended view provides what is shown below. The normal view is the same as the extended view but excludes subject and title in item_data. The compact view returns coordination_issue_id, item_id, and item_type only. The default view is normal.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `coordination_issue_id` (integer()): Coordination Issue ID
  - `body103` (Body103): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedProcoreItemsInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_coordination_issues_coordination_issue_id_procore_item_associations_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.Body103.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedProcoreItemsInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_coordination_issues_coordination_issue_id_procore_item_associations_post(
        connection,
        procore_company_id,
        coordination_issue_id,
        body103,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/coordination_issues/#{coordination_issue_id}/procore_item_associations")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:body, :body, body103)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CoordinationIssuesGet200ResponseInnerAllOfLinkedProcoreItemsInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {404, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
