# NOTE: This file is auto generated by OpenAPI Generator 7.9.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreCompanyCompanySchedule do
  @moduledoc """
  API calls for all endpoints tagged `CoreCompanyCompanySchedule`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Return company schedule summary
  Returns a list of the number of tasks and calendar items per project for each day in the specified date range. Tasks and calendar items whose start - finish overlap with the specified date range are included in the sums.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `after_var` (String.t): Beginning of date range to filter by.
  - `before` (String.t): End of date range to filter by
  - `opts` (keyword): Optional parameters
    - `:limit_per_day` (integer()): Number of results to return per day
    - `:project_ids` ([integer()]): Filter by project IDs
    - `:project_stage_ids` ([integer()]): Filter by project stage IDs
    - `:project_type_ids` ([integer()]): Filter by project type IDs
    - `:project_department_ids` ([integer()]): Filter by project department IDs
    - `:project_office_ids` ([integer()]): Filter by project office IDs
    - `:project_region_ids` ([integer()]): Filter by project region IDs
    - `:project_owner_type_ids` ([integer()]): Filter by project owner type IDs
    - `:program_ids` ([integer()]): Filter by project program IDs
    - `:resource_ids` ([integer()]): Filter by resource IDs
    - `:sort_key` (String.t): Sort results by a property of projects. Defaults to descending project_event_count.
    - `:sort_dir` (String.t): Sort results in ascending or descending order

  ### Returns

  - `{:ok, Procore.Model.RestV10CompaniesCompanyIdScheduleSummaryGet200Response.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_schedule_summary_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          String.t(),
          String.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdScheduleSummaryGet200Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_schedule_summary_get(
        connection,
        procore_company_id,
        company_id,
        after_var,
        before,
        opts \\ []
      ) do
    optional_params = %{
      :limit_per_day => :query,
      :project_ids => :query,
      :project_stage_ids => :query,
      :project_type_ids => :query,
      :project_department_ids => :query,
      :project_office_ids => :query,
      :project_region_ids => :query,
      :project_owner_type_ids => :query,
      :program_ids => :query,
      :resource_ids => :query,
      :sort_key => :query,
      :sort_dir => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/companies/#{company_id}/schedule/summary")
      |> add_param(:headers, "Procore-Company-Id", procore_company_id)
      |> add_param(:query, :after, after_var)
      |> add_param(:query, :before, before)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10CompaniesCompanyIdScheduleSummaryGet200Response},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
