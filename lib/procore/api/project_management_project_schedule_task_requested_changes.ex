# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementProjectScheduleTaskRequestedChanges do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementProjectScheduleTaskRequestedChanges`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List requested changes for a Schedule or a Task
  Returns the requested change list.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:task_id` (integer()): Task ID
    - `:view` (String.t): The `with_task` view includes an additional task data for correspondent requested changes
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page

  ### Returns

  - `{:ok, [%RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_schedule_requested_changes_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             list(
               Procore.Model.RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner.t()
             )}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_schedule_requested_changes_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :task_id => :query,
      :view => :query,
      :page => :query,
      :per_page => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.1/projects/#{project_id}/schedule/requested_changes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Review Requested Changes
  Review Requested Changes for Tasks.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v11_projects_project_id_schedule_requested_changes_review_patch_request` (RestV11ProjectsProjectIdScheduleRequestedChangesReviewPatchRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV11ProjectsProjectIdScheduleRequestedChangesReviewPatch200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_schedule_requested_changes_review_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV11ProjectsProjectIdScheduleRequestedChangesReviewPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             list(
               Procore.Model.RestV11ProjectsProjectIdScheduleRequestedChangesReviewPatch200ResponseInner.t()
             )}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_schedule_requested_changes_review_patch(
        connection,
        procore_company_id,
        project_id,
        rest_v11_projects_project_id_schedule_requested_changes_review_patch_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.1/projects/#{project_id}/schedule/requested_changes/review")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v11_projects_project_id_schedule_requested_changes_review_patch_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV11ProjectsProjectIdScheduleRequestedChangesReviewPatch200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Requested Change
  Create a new requested change on a Task.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `task_id` (integer()): Task ID
  - `rest_v11_projects_project_id_schedule_tasks_task_id_requested_changes_post_request` (RestV11ProjectsProjectIdScheduleTasksTaskIdRequestedChangesPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v11_projects_project_id_schedule_tasks_task_id_requested_changes_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV11ProjectsProjectIdScheduleTasksTaskIdRequestedChangesPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             Procore.Model.RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v11_projects_project_id_schedule_tasks_task_id_requested_changes_post(
        connection,
        procore_company_id,
        project_id,
        task_id,
        rest_v11_projects_project_id_schedule_tasks_task_id_requested_changes_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.1/projects/#{project_id}/schedule/tasks/#{task_id}/requested_changes")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v11_projects_project_id_schedule_tasks_task_id_requested_changes_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.RestV11ProjectsProjectIdScheduleRequestedChangesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
