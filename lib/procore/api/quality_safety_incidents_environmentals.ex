# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.QualitySafetyIncidentsEnvironmentals do
  @moduledoc """
  API calls for all endpoints tagged `QualitySafetyIncidentsEnvironmentals`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Environmentals
  Returns a list of Environmental records for a given project.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:incident_id` (integer()): Incident ID. When provided, the list will be scoped to only the Environmentals for a given Incident.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[environmental_type_id]"` ([integer()]): Return item(s) with the specified Environmental Type ID.
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:sort` (String.t): 

  ### Returns

  - `{:ok, [%IncidentNormalAllOfEnvironmentalsInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_incidents_environmentals_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, list(Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t())}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_incidents_environmentals_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :incident_id => :query,
      :page => :query,
      :per_page => :query,
      :"filters[environmental_type_id]" => :query,
      :"filters[query]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/incidents/environmentals")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.IncidentNormalAllOfEnvironmentalsInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Destroy Environmental
  Sends the specified Environmental record to the Recycle Bin

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Environmental ID
  - `opts` (keyword): Optional parameters
    - `:incident_id` (integer()): Incident ID

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_incidents_environmentals_id_delete(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_incidents_environmentals_id_delete(
        connection,
        procore_company_id,
        project_id,
        id,
        opts \\ []
      ) do
    optional_params = %{
      :incident_id => :query
    }

    request =
      %{}
      |> method(:delete)
      |> url("/rest/v1.0/projects/#{project_id}/incidents/environmentals/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {204, false},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Environmental
  Returns the specified Environmental record

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Environmental ID
  - `opts` (keyword): Optional parameters
    - `:incident_id` (integer()): Incident ID

  ### Returns

  - `{:ok, Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_incidents_environmentals_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_incidents_environmentals_id_get(
        connection,
        procore_company_id,
        project_id,
        id,
        opts \\ []
      ) do
    optional_params = %{
      :incident_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/incidents/environmentals/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.IncidentNormalAllOfEnvironmentalsInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Update Environmental
  Updates the Environmental record

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Environmental ID
  - `rest_v10_projects_project_id_incidents_environmentals_id_patch_request` (RestV10ProjectsProjectIdIncidentsEnvironmentalsIdPatchRequest): 
  - `opts` (keyword): Optional parameters
    - `:incident_id` (integer()): Incident ID

  ### Returns

  - `{:ok, Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_incidents_environmentals_id_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdIncidentsEnvironmentalsIdPatchRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_incidents_environmentals_id_patch(
        connection,
        procore_company_id,
        project_id,
        id,
        rest_v10_projects_project_id_incidents_environmentals_id_patch_request,
        opts \\ []
      ) do
    optional_params = %{
      :incident_id => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url("/rest/v1.0/projects/#{project_id}/incidents/environmentals/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_incidents_environmentals_id_patch_request
      )
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.IncidentNormalAllOfEnvironmentalsInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Create Environmental
  Creates an Environmental record.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `rest_v10_projects_project_id_incidents_environmentals_post_request` (RestV10ProjectsProjectIdIncidentsEnvironmentalsPostRequest): 
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_incidents_environmentals_post(
          Tesla.Env.client(),
          integer(),
          integer(),
          Procore.Model.RestV10ProjectsProjectIdIncidentsEnvironmentalsPostRequest.t(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_incidents_environmentals_post(
        connection,
        procore_company_id,
        project_id,
        rest_v10_projects_project_id_incidents_environmentals_post_request,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:post)
      |> url("/rest/v1.0/projects/#{project_id}/incidents/environmentals")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(
        :body,
        :body,
        rest_v10_projects_project_id_incidents_environmentals_post_request
      )
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {201, Procore.Model.IncidentNormalAllOfEnvironmentalsInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Recycled Environmentals
  Returns a list of Recycled Environmentals for a given project (or Incident, if incident_id is present).

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:incident_id` (integer()): Incident ID. When provided, the list will be scoped to only the Environmentals for a given Incident.
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[environmental_type_id]"` ([integer()]): Return item(s) with the specified Environmental Type ID.
    - `:"filters[query]"` (String.t): Return item(s) containing search query
    - `:sort` (String.t): 

  ### Returns

  - `{:ok, [%IncidentNormalAllOfEnvironmentalsInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_recycle_bin_incidents_environmentals_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, list(Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t())}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_recycle_bin_incidents_environmentals_get(
        connection,
        procore_company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :incident_id => :query,
      :page => :query,
      :per_page => :query,
      :"filters[environmental_type_id]" => :query,
      :"filters[query]" => :query,
      :sort => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/recycle_bin/incidents/environmentals")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.IncidentNormalAllOfEnvironmentalsInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Show Recycled Environmental
  Returns specified Recycled Environmental record

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Environmental ID
  - `opts` (keyword): Optional parameters
    - `:incident_id` (integer()): Incident ID

  ### Returns

  - `{:ok, Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_recycle_bin_incidents_environmentals_id_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, Procore.Model.IncidentNormalAllOfEnvironmentalsInner.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_recycle_bin_incidents_environmentals_id_get(
        connection,
        procore_company_id,
        project_id,
        id,
        opts \\ []
      ) do
    optional_params = %{
      :incident_id => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/projects/#{project_id}/recycle_bin/incidents/environmentals/#{id}")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.IncidentNormalAllOfEnvironmentalsInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  Retrieve Environmental
  Retrieves specified Recycled Environmental from the recycle bin

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `project_id` (integer()): Unique identifier for the project.
  - `id` (integer()): Environmental ID
  - `opts` (keyword): Optional parameters
    - `:incident_id` (integer()): Incident ID

  ### Returns

  - `{:ok, nil}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_projects_project_id_recycle_bin_incidents_environmentals_id_restore_patch(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, nil}
          | {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_projects_project_id_recycle_bin_incidents_environmentals_id_restore_patch(
        connection,
        procore_company_id,
        project_id,
        id,
        opts \\ []
      ) do
    optional_params = %{
      :incident_id => :query
    }

    request =
      %{}
      |> method(:patch)
      |> url(
        "/rest/v1.0/projects/#{project_id}/recycle_bin/incidents/environmentals/#{id}/restore"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> ensure_body()
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, false},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {:default, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
