# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.CoreProjectDirectoryProjectAssignmentsFilterOptions do
  @moduledoc """
  API calls for all endpoints tagged `CoreProjectDirectoryProjectAssignmentsFilterOptions`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List Project Names for a Company User
  This endpoint returns the list of Project Names for the specified User. This includes the names of Projects that the User is currently assigned to, as well as the names of Projects that the User is not currently assigned to.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsNamesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_names_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsNamesGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_names_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments/filter_options/names"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsNamesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Permission Templates for a Company User
  This endpoint returns the list of Permission Templates for the specified User. This includes the templates of Projects that the User is currently assigned to, as well as the templates of Projects that the User is not currently assigned to.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10ProjectsProjectIdDirectoryFilterOptionsPermissionTemplatesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_permission_templates_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10ProjectsProjectIdDirectoryFilterOptionsPermissionTemplatesGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_permission_templates_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments/filter_options/permission_templates"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10ProjectsProjectIdDirectoryFilterOptionsPermissionTemplatesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Programs for a Company User
  This endpoint returns the list of Programs for the specified User. This includes the programs of Projects that the User is currently assigned to, as well as the programs of Projects that the User is not currently assigned to.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProgramsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_programs_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProgramsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_programs_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments/filter_options/programs"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProgramsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Project Numbers for a Company User
  This endpoint returns the list of Project Numbers for the specified User. This includes the numbers of Projects that the User is currently assigned to, as well as the numbers of Projects that the User is not currently assigned to.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProjectNumbersGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_project_numbers_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProjectNumbersGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_project_numbers_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments/filter_options/project_numbers"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProjectNumbersGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Project Types for a Company User
  This endpoint returns the list of Project Types for the specified User. This includes the types of Projects that the User is currently assigned to, as well as the types of Projects that the User is not currently assigned to.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProjectTypesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_project_types_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProjectTypesGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_project_types_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments/filter_options/project_types"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsProjectTypesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Regions for a Company User
  This endpoint returns the list of Regions for the specified User. This includes the regions of Projects that the User is currently assigned to, as well as the regions of Projects that the User is not currently assigned to.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsRegionsGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_regions_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsRegionsGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_regions_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments/filter_options/regions"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsRegionsGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Roles for a Company User
  This endpoint returns the list of Roles for the specified User. This includes the roles of Projects that the User is currently assigned to, as well as the roles of Projects that the User is not currently assigned to.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsRolesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_roles_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsRolesGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_roles_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments/filter_options/roles"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsRolesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end

  @doc """
  List Project Stages for a Company User
  This endpoint returns the list of Project Stages for the specified User. This includes the stages of Projects that the User is currently assigned to, as well as the stages of Projects that the User is not currently assigned to.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company.
  - `user_id` (integer()): User ID
  - `opts` (keyword): Optional parameters

  ### Returns

  - `{:ok, [%RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsStagesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_stages_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsStagesGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_companies_company_id_users_user_id_project_assignments_filter_options_stages_get(
        connection,
        procore_company_id,
        company_id,
        user_id,
        _opts \\ []
      ) do
    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/companies/#{company_id}/users/#{user_id}/project_assignments/filter_options/stages"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10CompaniesCompanyIdUsersUserIdProjectAssignmentsFilterOptionsStagesGet200ResponseInner},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
