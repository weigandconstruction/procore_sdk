# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.ProjectManagementModelsBIMPropertyFileProperties do
  @moduledoc """
  API calls for all endpoints tagged `ProjectManagementModelsBIMPropertyFileProperties`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  List BIM Property File Properties
  Lists properties from a specific BIM Property File. A BIM Property File is a resource that represents a 3d-model database. For models published to the Models tool, the property file id can be found in [BIM Model Revision](https://developers.procore.com/reference/rest/v1/bim-model-revisions?version=1.0#show-bim-model-revision) object\\_definition -> id. For models uploaded and extracted with Procore Documents, the property file id can be found in [BIM File Extraction](https://developers.procore.com/reference/rest/v1/bim-file-extractions?version=1.0#show-bim-file-extraction) extraction\\_items -> artifact -> properties -> id.

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `id` (integer()): BIM Property File ID.
  - `project_id` (integer()): Unique identifier for the project.
  - `opts` (keyword): Optional parameters
    - `:page` (integer()): Page
    - `:per_page` (integer()): Elements per page
    - `:"filters[object_id]"` ([integer()]): Filter item(s) with matching object_id.
    - `:"filters[category]"` ([String.t]): Filter item(s) with matching category.
    - `:"filters[name]"` ([String.t]): Filter item(s) with matching name.
    - `:"filters[value]"` ([String.t]): Filter item(s) with matching value.
    - `:"filters[query]"` (String.t): Filter item(s) containing query. Searchable fields include Property Category, Name, and Value
    - `:"filters[curated_list]"` (boolean()): Filter item(s) to return a curated list of properties
    - `:"filters[has_uom]"` (boolean()): Filter item(s) to return properties with/without unit of measurement (uom).

  ### Returns

  - `{:ok, [%RestV10BimPropertyFilesIdPropertiesGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_bim_property_files_id_properties_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response.t()}
          | {:ok, list(Procore.Model.RestV10BimPropertyFilesIdPropertiesGet200ResponseInner.t())}
          | {:error, Tesla.Env.t()}
  def rest_v10_bim_property_files_id_properties_get(
        connection,
        procore_company_id,
        id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :page => :query,
      :per_page => :query,
      :"filters[object_id]" => :query,
      :"filters[category]" => :query,
      :"filters[name]" => :query,
      :"filters[value]" => :query,
      :"filters[query]" => :query,
      :"filters[curated_list]" => :query,
      :"filters[has_uom]" => :query
    }

    request =
      %{}
      |> method(:get)
      |> url("/rest/v1.0/bim_property_files/#{id}/properties")
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_param(:query, :project_id, project_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200, Procore.Model.RestV10BimPropertyFilesIdPropertiesGet200ResponseInner},
      {400, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {401, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {403, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {422, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response},
      {500, Procore.Model.RestV10CompaniesCompanyIdWorkflowPermanentLogsGet401Response}
    ])
  end
end
