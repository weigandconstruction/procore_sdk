# NOTE: This file is auto generated by OpenAPI Generator 7.12.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Api.WorkforceManagementWorkforcePlanningWorkforcePlanningReports do
  @moduledoc """
  API calls for all endpoints tagged `WorkforceManagementWorkforcePlanningWorkforcePlanningReports`.
  """

  alias Procore.Connection
  import Procore.RequestBuilder

  @doc """
  Get Look Ahead Data
  Fetches the Look Ahead report which provides future assignments and availability details for People within a specified Group. To span all Groups in the company, use `\"all\"` in place of `{group_id}`. 

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters
    - `:jobTitleIds` ([String.t]): An array of UUIDs representing the Job Titles to include in the report. People with Job Titles not in this list will be excluded.
    - `:assignmentCount` (integer()): The number of future assignments to return per person.
    - `:projectName` (boolean()): Whether to include the project name for each assignment.
    - `:project_number` (String.t): Filters items by their exact project number. The query performs an exact match. Example usage: `/v2/companies/{company_id}/...?project_number=BR-2024` 
    - `:assignmentStart` (boolean()): Whether to include the assignment start date.
    - `:assignmentEnd` (boolean()): Whether to include the assignment end date.
    - `:availableAfterDate` (boolean()): Whether to include the last day a person is assigned in the future.
    - `:employee_number` (String.t): Filter results by the exact employee number of the Person.
    - `:jobTitle` (boolean()): Whether to include the person's Job Title.
    - `:assignmentDuration` (boolean()): Whether to include a calculated duration for each assignment.

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_reports_look_ahead_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_reports_look_ahead_get(
        connection,
        procore_company_id,
        company_id,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :jobTitleIds => :query,
      :assignmentCount => :query,
      :projectName => :query,
      :project_number => :query,
      :assignmentStart => :query,
      :assignmentEnd => :query,
      :availableAfterDate => :query,
      :employee_number => :query,
      :jobTitle => :query,
      :assignmentDuration => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups/#{group_id}/reports/look-ahead"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Get Tags Requiring Action Report
  Retrieves a list of People who have Tags that are either expired or within their expiration warning period. This report is executed under the context of the specified Group ID. If you want to fetch data for all groups in a company, use `all` in place of `{group_id}`. 

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `group_id` (integer()): Unique identifier for the group
  - `opts` (keyword): Optional parameters
    - `:tagIds` ([String.t]): Array of UUIDs representing the Tags you want to filter the report by. If not provided, the report includes all Tags available to the Group. 
    - `:warningTags` (boolean()): Determines whether Tags within their expiration warning period should be included in the report. If set to `false`, only expired Tags will be included. 
    - `:employee_number` (String.t): Filter results by the exact employee number of the Person.
    - `:jobTitle` (boolean()): Whether to include the person's Job Title.

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsTagActionGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_reports_tag_action_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsTagActionGet200ResponseInner.t()
             ]}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_groups_group_id_reports_tag_action_get(
        connection,
        procore_company_id,
        company_id,
        group_id,
        opts \\ []
      ) do
    optional_params = %{
      :tagIds => :query,
      :warningTags => :query,
      :employee_number => :query,
      :jobTitle => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/groups/#{group_id}/reports/tag-action"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsTagActionGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Get Person's Assignment History Data
  Fetches the assignment history for a specific Person, returning records of all assignments linked to them. 

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `person_id` (integer()): Unique identifier for the person
  - `opts` (keyword): Optional parameters
    - `:projectName` (boolean()): Whether to include the project name for each assignment.
    - `:project_number` (String.t): Filters items by their exact project number. The query performs an exact match. Example usage: `/v2/companies/{company_id}/...?project_number=BR-2024` 
    - `:assignmentStart` (boolean()): Whether to include the assignment start date.
    - `:assignmentEnd` (boolean()): Whether to include the assignment end date.
    - `:start_time` (boolean()): Will return the daily start time for each assignment.
    - `:end_time` (boolean()): Will return the daily end time for each assignment.
    - `:cost_code` (boolean()): Will return the name and UUID of the Cost Code for each assignment.
    - `:labels` (boolean()): Will return the name and UUID of the Label for each assignment.
    - `:duration` (boolean()): Will return a calculated duration for each listed assignment.

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdReportsAssignmentHistoryGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_people_person_id_reports_assignment_history_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdReportsAssignmentHistoryGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_people_person_id_reports_assignment_history_get(
        connection,
        procore_company_id,
        company_id,
        person_id,
        opts \\ []
      ) do
    optional_params = %{
      :projectName => :query,
      :project_number => :query,
      :assignmentStart => :query,
      :assignmentEnd => :query,
      :start_time => :query,
      :end_time => :query,
      :cost_code => :query,
      :labels => :query,
      :duration => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/people/#{person_id}/reports/assignment-history"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdReportsAssignmentHistoryGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end

  @doc """
  Get Project's Assignment History Data
  Fetches the assignment history for a specific Project, returning records of all assignments linked to it. 

  ### Parameters

  - `connection` (Procore.Connection): Connection to server
  - `procore_company_id` (integer()): Unique company identifier associated with the Procore User Account.
  - `company_id` (integer()): Unique identifier for the company. NOTE - this is a Laborchart company ID
  - `project_id` (integer()): Unique identifier for the project
  - `opts` (keyword): Optional parameters
    - `:employeeName` (boolean()): Determines whether the employee's name should be included in the response. If set to `true`, the response will include the person's first and last name. Default is `true`. 
    - `:employee_number` (String.t): Filter results by the exact employee number of the Person.
    - `:jobTitle` (boolean()): Whether to include the person's Job Title.
    - `:assignmentStart` (boolean()): Whether to include the assignment start date.
    - `:assignmentEnd` (boolean()): Whether to include the assignment end date.
    - `:start_time` (boolean()): Will return the daily start time for each assignment.
    - `:end_time` (boolean()): Will return the daily end time for each assignment.
    - `:cost_code` (boolean()): Will return the name and UUID of the Cost Code for each assignment.
    - `:labels` (boolean()): Will return the name and UUID of the Label for each assignment.
    - `:duration` (boolean()): Will return a calculated duration for each listed assignment.

  ### Returns

  - `{:ok, [%RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdReportsAssignmentHistoryGet200ResponseInner{}, ...]}` on success
  - `{:error, Tesla.Env.t}` on failure
  """
  @spec rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_reports_assignment_history_get(
          Tesla.Env.client(),
          integer(),
          integer(),
          integer(),
          keyword()
        ) ::
          {:ok,
           Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response.t()}
          | {:ok,
             Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response.t()}
          | {:ok,
             [
               Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdReportsAssignmentHistoryGet200ResponseInner.t()
             ]}
          | {:error, Tesla.Env.t()}
  def rest_v10_workforce_planning_v2_companies_company_id_projects_project_id_reports_assignment_history_get(
        connection,
        procore_company_id,
        company_id,
        project_id,
        opts \\ []
      ) do
    optional_params = %{
      :employeeName => :query,
      :employee_number => :query,
      :jobTitle => :query,
      :assignmentStart => :query,
      :assignmentEnd => :query,
      :start_time => :query,
      :end_time => :query,
      :cost_code => :query,
      :labels => :query,
      :duration => :query
    }

    request =
      %{}
      |> method(:get)
      |> url(
        "/rest/v1.0/workforce_planning/v2/companies/#{company_id}/projects/#{project_id}/reports/assignment-history"
      )
      |> add_param(:headers, :"Procore-Company-Id", procore_company_id)
      |> add_optional_params(optional_params, opts)
      |> Enum.into([])

    connection
    |> Connection.request(request)
    |> evaluate_response([
      {200,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdProjectsProjectIdReportsAssignmentHistoryGet200ResponseInner},
      {400,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet400Response},
      {401,
       Procore.Model.RestV10WorkforcePlanningV2CompaniesCompanyIdGroupsGroupIdReportsLookAheadGet401Response}
    ])
  end
end
