# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Model.RequisitionSubcontractorInvoice1 do
  @moduledoc """
  Requisition (Subcontractor Invoice)
  """

  @derive Jason.Encoder
  defstruct [
    :items,
    :period_id,
    :requisition_start,
    :requisition_end,
    :billing_date,
    :final,
    :invoice_number,
    :payment_date,
    :origin_data,
    :origin_id,
    :status,
    :submitted_at,
    :prostore_file_ids,
    :"custom_field_%{custom_field_definition_id}"
  ]

  @type t :: %__MODULE__{
          :items => [Procore.Model.RequisitionSubcontractorInvoice1ItemsInner.t()] | nil,
          :period_id => integer() | nil,
          :requisition_start => Date.t() | nil,
          :requisition_end => Date.t() | nil,
          :billing_date => Date.t() | nil,
          :final => boolean() | nil,
          :invoice_number => String.t() | nil,
          :payment_date => Date.t() | nil,
          :origin_data => String.t() | nil,
          :origin_id => String.t() | nil,
          :status => String.t() | nil,
          :submitted_at => Date.t() | nil,
          :prostore_file_ids => [integer()] | nil,
          :"custom_field_%{custom_field_definition_id}" =>
            Procore.Model.WorkOrderContractCustomFieldCustomFieldDefinitionId.t() | nil
        }

  alias Procore.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(
      :items,
      :list,
      Procore.Model.RequisitionSubcontractorInvoice1ItemsInner
    )
    |> Deserializer.deserialize(:requisition_start, :date, nil)
    |> Deserializer.deserialize(:requisition_end, :date, nil)
    |> Deserializer.deserialize(:billing_date, :date, nil)
    |> Deserializer.deserialize(:payment_date, :date, nil)
    |> Deserializer.deserialize(:submitted_at, :date, nil)
    |> Deserializer.deserialize(
      :"custom_field_%{custom_field_definition_id}",
      :struct,
      Procore.Model.WorkOrderContractCustomFieldCustomFieldDefinitionId
    )
  end
end
