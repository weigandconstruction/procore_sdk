# NOTE: This file is auto generated by OpenAPI Generator 7.8.0 (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Model.RestV10ChangeOrderPackagesIdGet200ResponseLineItemsInnerMarkupLineItemsInnerMarkup do
  @moduledoc """

  """

  @derive Jason.Encoder
  defstruct [
    :id,
    :position,
    :markup_set,
    :name,
    :percentage,
    :compounds_markups_above,
    :created_at,
    :updated_at,
    :wbs_code_id,
    :destination_cost_code,
    :destination_line_item_type,
    :desitination_budget_line_item_id,
    :destination_sub_job
  ]

  @type t :: %__MODULE__{
          :id => integer() | nil,
          :position => integer() | nil,
          :markup_set => String.t() | nil,
          :name => String.t() | nil,
          :percentage => String.t() | nil,
          :compounds_markups_above => boolean() | nil,
          :created_at => DateTime.t() | nil,
          :updated_at => DateTime.t() | nil,
          :wbs_code_id => integer() | nil,
          :destination_cost_code =>
            Procore.Model.RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkupDestinationCostCode.t()
            | nil,
          :destination_line_item_type => Procore.Model.LineItemType.t() | nil,
          :desitination_budget_line_item_id => integer() | nil,
          :destination_sub_job => Procore.Model.RestV10SubJobsGet200ResponseInner.t() | nil
        }

  alias Procore.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(:created_at, :datetime, nil)
    |> Deserializer.deserialize(:updated_at, :datetime, nil)
    |> Deserializer.deserialize(
      :destination_cost_code,
      :struct,
      Procore.Model.RestV10ChangeOrderPackagesPost201ResponseLineItemsInnerMarkupLineItemsInnerMarkupDestinationCostCode
    )
    |> Deserializer.deserialize(:destination_line_item_type, :struct, Procore.Model.LineItemType)
    |> Deserializer.deserialize(
      :destination_sub_job,
      :struct,
      Procore.Model.RestV10SubJobsGet200ResponseInner
    )
  end
end
