# NOTE: This file is auto generated by OpenAPI Generator 7.7.0-SNAPSHOT (https://openapi-generator.tech).
# Do not edit this file manually.

defmodule Procore.Model.CoordinationIssueSyncResponseErrorsInner do
  @moduledoc """

  """

  @derive Jason.Encoder
  defstruct [
    :uuid,
    :title,
    :description,
    :status,
    :creation_source,
    :location_id,
    :assignee_id,
    :coordination_issue_file_id,
    :drawing_revision_id,
    :bim_model_id,
    :due_date,
    :origin,
    :attachment_upload_uuids,
    :attachments,
    :viewpoints,
    :errors
  ]

  @type t :: %__MODULE__{
          :uuid => String.t() | nil,
          :title => String.t(),
          :description => String.t() | nil,
          :status => String.t() | nil,
          :creation_source => String.t() | nil,
          :location_id => integer() | nil,
          :assignee_id => integer() | nil,
          :coordination_issue_file_id => integer() | nil,
          :drawing_revision_id => integer() | nil,
          :bim_model_id => integer() | nil,
          :due_date => String.t() | nil,
          :origin => Procore.Model.Body99CoordinationIssueOrigin.t() | nil,
          :attachment_upload_uuids => [String.t()] | nil,
          :attachments => [String.t()] | nil,
          :viewpoints =>
            [Procore.Model.CoordinationIssueSyncResponseErrorsInnerAllOfViewpointsInner.t()] | nil,
          :errors =>
            Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors.t()
            | nil
        }

  alias Procore.Deserializer

  def decode(value) do
    value
    |> Deserializer.deserialize(:origin, :struct, Procore.Model.Body99CoordinationIssueOrigin)
    |> Deserializer.deserialize(
      :viewpoints,
      :list,
      Procore.Model.CoordinationIssueSyncResponseErrorsInnerAllOfViewpointsInner
    )
    |> Deserializer.deserialize(
      :errors,
      :struct,
      Procore.Model.RestV10WorkOrderContractsWorkOrderContractIdLineItemsSyncPatch200ResponseErrorsInnerAllOfErrors
    )
  end
end
